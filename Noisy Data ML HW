{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<img src=\"https://avatars.mds.yandex.net/i?id=08831819d2b500822a90327ea7aee923ef8a5322-9154878-images-thumbs&n=13\" height=\"250\">\n",
    "\n",
    "# Андан на экономе: домашнее задание 3\n",
    "</center>\n",
    "\n",
    "\n",
    "> Bicycle bicycle bicycle  <br> I want to ride my bicycle <br> I want to ride my bike <br> I want to ride my bicycle <br>  I want to ride it where I like\n",
    "\n",
    "$\\qquad$ $\\qquad$ $\\qquad$ $\\qquad$  **[Bicycle Race (Queen)](https://www.youtube.com/watch?v=r2lT4oE4DxE)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ФИО: Щудро Виктория Игоревна**\n",
    "\n",
    "**Твой любимый аник: в раю горит два сада: на грушевый пофиг, а яблочный спас**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Общая информация\n",
    "\n",
    "\n",
    "__Дата выдачи:__ 29.02.2024\n",
    "\n",
    "__Мягкий дедлайн:__ 23:59MSK 19.05.2024\n",
    "\n",
    "__Жесткий дедлайн:__ 23:59MSK 26.05.2024"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Оценивание и штрафы\n",
    "\n",
    "Каждая из задач имеет определенную «стоимость» (указана в скобках около задачи). Максимально допустимая оценка за работу — 100 баллов. За каждый день просрочки после мягкого дедлайна снимается 10 баллов. После жёсткого дедлайна работы не принимаются. Даже при опозданиии на одну секунду. Сдавайте работы заранее.\n",
    "\n",
    "Мягкий дедлайн можно отодвинуть без потери баллов на 1,2 или 3 дня. Суммарно для откладывания в запасе есть три дня. Можно отодвинуть один дедлайн на три дня, а можно три дедлайна подвинуть на один день. Распоряжаться этими днями студент может как угодно. Жёсткий дедлайн, при этом, не меняется. Если такое произошло, нужно сообщить о сдвиге при сдаче работы.\n",
    "\n",
    "Задание выполняется самостоятельно. «Похожие» решения считаются плагиатом и все задействованные студенты (в том числе те, у кого списали) не могут получить за него больше 0 баллов. Если вы нашли решение какого-то из заданий (или его часть) в открытом источнике, необходимо указать ссылку на этот источник (скорее всего вы будете не единственным, кто это нашел, поэтому чтобы исключить подозрение в плагиате, необходима ссылка на источник).\n",
    "\n",
    "Любой из студентов может быть вызван на защиту любого домашнего задания. В таком случае итоговая оценка студента определяется в результате защиты.\n",
    "\n",
    "> За отсутствие названий графиков и подписей к осям могут снижаться баллы. Все картинки должны быть самодостаточны и визуально удобны для восприятия, так чтобы не нужно было смотреть ваш код или знать задание, чтобы понять что на них изображено. Выводы должны быть релевантными. Не забывайте их писать. Если в вопросе требуется ответ словами, а его нет, вы будете терять довольно много баллов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Формат сдачи\n",
    "\n",
    "Сам ноутбук называйте в формате hw-02-USERNAME.ipynb, где USERNAME — ваши фамилия и имя на латинице. Задание сдаётся в anytask."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn\n",
    "\n",
    "import scipy.stats as sts\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Спрос на велосипеды\n",
    "\n",
    "В этой домашке мы будем работать с данными о спросе на велосипеды. Мы научимся его предсказывать."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(731, 13)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed(mph)</th>\n",
       "      <th>windspeed(ms)</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>4.805490</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>7.443949</td>\n",
       "      <td>801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>7.437060</td>\n",
       "      <td>1349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>4.800998</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>5.597810</td>\n",
       "      <td>1600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
       "0       1   0     1        0        6           0           2  14.110847   \n",
       "1       1   0     1        0        0           0           2  14.902598   \n",
       "2       1   0     1        0        1           1           1   8.050924   \n",
       "3       1   0     1        0        2           1           1   8.200000   \n",
       "4       1   0     1        0        3           1           1   9.305237   \n",
       "\n",
       "      atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
       "0  18.18125  80.5833       10.749882       4.805490   985  \n",
       "1  17.68695  69.6087       16.652113       7.443949   801  \n",
       "2   9.47025  43.7273       16.636703       7.437060  1349  \n",
       "3  10.60610  59.0435       10.739832       4.800998  1562  \n",
       "4  11.46350  43.6957       12.522300       5.597810  1600  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('bikes_rent.csv')\n",
    "print(df.shape)\n",
    "df.head( )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Описание переменных:__\n",
    "\n",
    "* `season`  1 - весна, 2 - лето, 3 - осень, 4 - зима\n",
    "* `yr`  0 - 2011, 1 - 2012\n",
    "* `mnth`  от 1 до 12\n",
    "* `holiday`  0 - нет праздника, 1 - есть праздник\n",
    "* `weekday`  от 0 до 6\n",
    "* `workingday`  0 - нерабочий день, 1 - рабочий день\n",
    "* `weathersit`  оценка благоприятности погоды от 1 (чистый, ясный день) до 4 (ливень, туман)\n",
    "* `temp`  температура в Цельсиях\n",
    "* `atemp`  температура по ощущениям в Цельсиях\n",
    "* `hum`  влажность\n",
    "* `windspeed(mph)`  скорость ветра в милях в час\n",
    "* `windspeed(ms)`  скорость ветра в метрах в секунду\n",
    "* `cnt`  количество арендованных велосипедов (это целевой признак, его мы будем предсказывать)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Функция для того, чтобы на одной картинке смотреть те графики с прогнозами.\n",
    "def plot_yreal_ypred(y_test, y_train, y_test_hat, y_train_hat):\n",
    "    \"\"\"\n",
    "        Рисует картинку для прогнозов регрессии \n",
    "    \"\"\"\n",
    "    \n",
    "    margin = 0.1 # отступ на границах\n",
    "    plt.figure(figsize=(10,5))\n",
    "    plt.subplot(121)\n",
    "    plt.scatter(y_train, y_train_hat, color=\"red\", alpha=0.5)\n",
    "    plt.xlabel('Истинные значения')\n",
    "    plt.ylabel('Предсказанные значения')\n",
    "    plt.axis('equal')\n",
    "    plt.axis('square')\n",
    "    train_min = min(y_train)\n",
    "    train_max = max(y_train)\n",
    "    plt.xlim(train_min - margin, train_max + margin)\n",
    "    plt.ylim(train_min - margin, train_max + margin)\n",
    "    plt.plot([-10000, 10000], [-10000, 10000])\n",
    "    plt.title('Train set', fontsize=20)\n",
    "\n",
    "    plt.subplot(122)\n",
    "    plt.scatter(y_test, y_test_hat, color=\"red\", alpha=0.5)\n",
    "    plt.xlabel('Истинные значения')\n",
    "    plt.ylabel('Предсказанные значения')\n",
    "    plt.axis('equal')\n",
    "    plt.axis('square')\n",
    "    test_min = min(y_test)\n",
    "    test_max = max(y_test)\n",
    "    plt.xlim(test_min - margin, test_max + margin)\n",
    "    plt.ylim(test_min - margin, test_max + margin)\n",
    "    plt.plot([-10000, 10000], [-10000, 10000])\n",
    "    plt.title('Test set', fontsize=20)\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. EDA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__а) [5 баллов]__ Проверьте, есть ли в данных пропуски "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "season            False\n",
      "yr                False\n",
      "mnth              False\n",
      "holiday           False\n",
      "weekday           False\n",
      "workingday        False\n",
      "weathersit        False\n",
      "temp              False\n",
      "atemp             False\n",
      "hum               False\n",
      "windspeed(mph)    False\n",
      "windspeed(ms)     False\n",
      "cnt               False\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "### ╰( ͡° ͜ʖ ͡° )つ▬▬ι═══════  bzzzzzzzzzz\n",
    "print(df.isnull().any())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видно из результатов, пропусков в данных нет. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__б) [5 баллов]__ Составьте список из категориальных переменных и список из действительных переменных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "var_cat = ['season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit']\n",
    "var_real = ['temp', 'atemp', 'hum', 'windspeed(mph)', 'windspeed(ms)']\n",
    "\n",
    "target = 'cnt'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__в) [5 баллов]__ Нарисуйте гистограмму для целевого признака. Что можете сказать о его хвосте? Надо ли предпринять какие-нибудь манипуляции, связанные с борьбой с выбросами? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjMAAAHFCAYAAAAHcXhbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA8aklEQVR4nO3deXRU9f3/8ddAYLIHQsiGhAQMBAiLgkVQTMCCLKIVVwKCdanIIogKItoEl6DQIlosFisRBYobRerPKigSVIJEFGUJShEY1MQwiEkkMQv5/P7wMF/GhCVDwsyF5+Oce47zuZ/Pve+Ze4e8vNvYjDFGAAAAFtXI2wUAAACcDsIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMvO7FF1+UzWY77rR3715vlwgA8GF+3i4AOCorK0tJSUk12mNiYrxQDQDAKggz8BnJycnq2bOnt8sAAFgMp5lgGUdPRx172qmyslIdO3aUzWbTiy++6Nb/k08+0bBhw9SiRQv5+/urXbt2mjx5siQpIyPjhKe2bDab1q1b51rWokWL1K1bN/n7+ys8PFzXXHON8vLy3NZ3yy231Lqc+Ph4V5/U1FQlJyfrww8/1MUXX6yAgAC1atVKDz/8sI4cOeK2vJkzZ6pXr14KDw9XaGioLrzwQr3wwgv67W/DxsfHy2azafz48TU+s379+slms+nKK690ta1bt85V26ZNm9z679mzR40bN5bNZtPrr7/uav/000910003KT4+XgEBAYqPj9eIESO0b9++Guv8rb1798pms+kvf/lLjXnJyclKTU2t0f7ee+/p8ssvV2hoqAIDA3XJJZfo/fffr3X5R9//ibafJL3yyivq3bu3goKCFBwcrCuuuEKff/65W5/fbsOwsDBdcsklWr16dY311tc+carLqs3JTtFmZGS4+h7d5z///HMNHz5coaGhCgsL06hRo3TgwIEan+ktt9zi1vbyyy/XqP2LL75Q7969FRERoaZNm6pVq1b64x//qPz8fFefo/vbsfvTUcHBwW7rOXDggMaNG6dOnTopODhYkZGR6t+/vz788EO3cUf3qWO/806nU127dlXHjh1VUFDgan/22Wd12WWXKTIyUkFBQerSpYtmz56tysrKk36+sA7CDCztqaee0q5du2q0v/vuu+rbt68cDofmzp2r//73v3rooYf0ww8/SJJuv/125eTkuKbo6GgNGTLEre3CCy+UJM2aNUu33XabOnfurBUrVujpp5/Wl19+qd69e9dYd0BAgNsycnJy9O9//9utT0FBgW666SaNHDlSb775pq677jo99thjmjRpklu/vXv36s4779Srr76qFStWaPjw4Zo4caIeffTRGu83PDxcL730koqLi11t27dv18cff6zQ0NBaP7vw8HDNnz/fre3vf/+7mjdvXqPv3r171aFDB82bN0/vvvuunnzySeXn5+uiiy6S0+msdfmeWrJkiQYOHKjQ0FAtXrxYr776qsLDw3XFFVccN9Acu+2effbZGvMzMzM1YsQIderUSa+++qpefvlllZSUqG/fvtqxY4db3+joaNeysrKydPjwYV111VXav3+/q0997hN1WdbxZGVluS3/nXfeOW7fa665Rueff75ef/11ZWRkaOXKlbriiitO+Me9uLhYU6dOVePGjd3ag4KCNGbMGC1dulTvv/++nnzySX344Ye67rrrTqnu3/rxxx8lSenp6fp//+//KSsrS23btlVqamqNcHosp9Op/v37q7KyUh988IGio6Nd83bv3q20tDS9/PLLeuutt3Tbbbdpzpw5uvPOOz2qET7KAF6WlZVlJJnc3NxT6rdnzx5jjDHffvutCQ4ONnfffbeRZLKyslx927VrZ9q1a2fKyspOqYY2bdqYMWPG1Gg/dOiQCQgIMEOGDHFrdzgcxm63m7S0NFfbmDFjTFBQ0AnXk5KSYiSZN9980639jjvuMI0aNTL79u2rddyRI0dMZWWleeSRR0yLFi1MdXW1W+1Dhw41nTp1Mk8//bSrfezYseaGG25wzT/qgw8+MJLM1KlTjd1uN4WFhcYYY0pLS014eLiZOnWqkWRee+21476Pqqoq8/PPP5ugoCC3ddZmz549RpKZM2dOjXmdO3c2KSkprteHDx824eHhZtiwYTXef7du3czvfve7GsuIiYkxt912W43398EHHxhjft1Wfn5+ZuLEiW7jSkpKTHR0tLnhhhtcbWPGjDFt2rRx67dy5Uojybz99tvGmPrdJ+qyrNoc77tz4MABI8mkp6e72tLT040kc88997j1Xbp0qZFklixZ4mr77fdh8uTJplWrVubaa6+t8fkY8+v+UF5ebnbv3m1SU1NNWFiYa97R7VHb/hQUFFTr9+7Y5VZWVprLL7/cXHPNNa72o/tUVlaWOXDggOnatatJSkoy+fn5x12WMf/3PXrppZdM48aNzY8//njC/rAOjszAsqZMmaL4+HhNnDjRrf3rr7/W7t27ddttt8nf3/+01pGTk6OysrIah9xbt26t/v37H/dIwYmEhIToqquucmtLS0tTdXW11q9f72pbu3atfv/73yssLEyNGzdWkyZN9Oc//1kHDx5UYWFhjeVOmDBBzz77rIwxKioq0ssvv1zrqaejLrroInXr1k0LFy6UJC1dulTNmzfXoEGDavT9+eefNW3aNJ1//vny8/OTn5+fgoODdfjw4VM6HXKqNmzYoB9//FFjxoxRVVWVa6qurtagQYOUm5urw4cPu40pKys74XZ+9913VVVVpdGjR7st09/fXykpKbX+H//RPvv371dWVpbCwsLUo0cPSfW7TzTE/nUyI0eOdHt9ww03yM/PTx988EGt/bdt26b58+frr3/9q4KDg2vt06NHD9ntdrVr1045OTl6/PHHa/Sprq52+/yrqqpqXdZzzz2nCy+8UP7+/vLz81OTJk30/vvv17qfHTx4UJdffrm+/PJLvfHGG25HZI76/PPPddVVV6lFixau79Ho0aN15MgRff3117XWAOshzMCS1q5dq9dee03z58+Xn5/7dexHz/+fd955p72egwcPSqr9jqrY2FjX/LqIioqq0Xb0H+Gjy9u0aZMGDhwoSXr++ef18ccfKzc3VzNmzJD06x/w3xo9erR++OEHrV69WllZWWrXrp0uu+yyE9YyceJEPffcc6qqqtKzzz6rcePGyWaz1eiXlpam+fPn6/bbb9e7776rTZs2KTc3Vy1btqy1Fk8dPQ143XXXqUmTJm7Tk08+KWOM61SE9Os1U0VFRYqIiDjpMi+66KIay3zllVdqnCbbt2+fa35cXJzWr1+vF198UZGRkZLqd59oiP3rZH77B9/Pz08tWrQ47rrGjx+vvn376sYbbzzuMpctW6YNGzZowYIFGjRokLp3716jz4033ljj8/9tMJ07d67uuusu9erVS2+88YY2btyo3NxcDRo0qNb97MEHH1RFRYWio6P18MMP15jvcDjUt29ffffdd3r66af14YcfKjc313Uqsj73XXgXdzPBciorKzVhwgSlpaUpJSWlxnNoWrZsKUn69ttvT3tdLVq0kCS3CxqP+v7770/4R/R4jv5xPdbRCxaPrm/58uVq0qSJ3nrrLbejDitXrjzucoOCgnTLLbfomWee0a5du3TfffedtJYbbrhB9957r+677z59/fXXuvXWW7Vlyxa3PkVFRXrrrbeUnp6uBx54wNVeXl7uFizqw9HP829/+5suvvjiWvscGwZ3794tY4zOP//8ky7z9ddfV5s2bU5aQ0xMjFatWiVJOnz4sOu6phUrVrj+D1+qn32iIfavkykoKFCrVq1cr6uqqnTw4EFXLcdaunSpcnJyauwTv9WpUydJUu/evRUYGKgrrrhCe/fudav/ySefVP/+/d3G/TZsL1myRKmpqVqwYIFbe0lJSa3rbdu2rT744AN98cUXGjx4sF544QXddtttrvkrV67U4cOHtWLFCrdtf7L3A+shzMBynn76aX377bfHPQTfvn17tWvXTosWLdKUKVNkt9s9Xlfv3r0VEBCgJUuW6Prrr3e1f/vtt1q7dq1HFzqWlJRo1apVbqeali1bpkaNGrn+cbfZbPLz83O74LKsrEwvv/zyCZc9fvx4dejQwXWXysk0bdpUf/rTn/TYY4/pjjvuULNmzWr0sdlsMsbU+Bz/+c9/1rgD63RdcsklatasmXbs2KEJEyactP/RcNe3b9/j9rniiivk5+en3bt369prrz3pMps2ber2iICUlBRlZWVp+fLluuqqq+p1n2iI/etkli5d6jplJkmvvvqqqqqqatxVVlJSovvvv1+TJk1yhZVTUVpaqsOHD+ubb75xCzNt27at8eiFRo3cTw7YbLYa+9mXX36pnJwctW7dusa6pk2bpujoaEVHR2vixImaNGmS+vbtq/bt27uWJ8ltmcYYPf/886f8fmANhBlYznPPPac5c+ac8GF6zz77rIYNG6aLL75Y99xzj+Li4uRwOPTuu+9q6dKlp7yuZs2a6eGHH9aDDz6o0aNHa8SIETp48KBmzpwpf39/paen17n+Fi1a6K677pLD4VD79u319ttv6/nnn9ddd92luLg4SdLQoUM1d+5cpaWl6U9/+pMOHjyov/zlLycNZomJifrwww8VFBSkwMDAU6rn3nvvVUpKirp27Vrr/NDQUF122WWaM2eOIiIiFB8fr+zsbL3wwgu1hp/jOXDggHbu3OnWVlFRodLSUu3cuVNJSUkKDg7W3/72N40ZM0Y//vijrrvuOkVGRurAgQP64osvdODAAS1YsED5+fmaP3++Zs+erbS0tBMecYmPj9cjjzyiGTNm6JtvvtGgQYPUvHlz/fDDD9q0aZOCgoI0c+ZMV//y8nJt3LhR0v8dmfnpp590wQUXSKrffaIh9q+TWbFihfz8/DRgwABt375dDz/8sLp166YbbrjBrd+bb76pqKioE9YwZ84cHTlyRF26dJG/v79yc3OVmZmpNm3aqFu3bnWu7corr9Sjjz6q9PR0paSk6KuvvtIjjzyihISE415jc9STTz6ptWvXauTIkdqwYYOaNGmiAQMGqGnTphoxYoSmTp2qX375RQsWLNChQ4fqXBt8nFcvPwZM3e9m6ty5s6msrHS1H3tnw7FycnLM4MGDTVhYmLHb7aZdu3Y17uQ46nh3Mx31z3/+03Tt2tU0bdrUhIWFmauvvtps377drc+p3s3UuXNns27dOtOzZ09jt9tNTEyMefDBB93ekzHGLFq0yHTo0MHY7XbTtm1bM2vWLPPCCy+43dF1tPZj71aq7b3VdjfT8e5Wqm3+t99+a6699lrTvHlzExISYgYNGmS2bdt20s/NmP/bPiebjpWdnW2GDh1qwsPDTZMmTUyrVq3M0KFDXTUtW7bMJCUlmUcffdRUVFTUWv/Ru5mOWrlypenXr58JDQ01drvdtGnTxlx33XXmvffec/UZM2aMW02BgYGmY8eO5vHHHzdHjhxxW1597ROnuqzaeHI30+bNm82wYcNMcHCwCQkJMSNGjDA//PCD2/g2bdoYSeZf//pXjfdz7N1MixcvNt27dzchISHG39/ftG3b1owbN844HA5Xn7rczVReXm7uu+8+06pVK+Pv728uvPBCs3LlyhrrPd53/osvvjB2u91MmzbN1faf//zHdOvWzfj7+5tWrVqZ+++/3/z3v/+tdR+BddmM+c0TuAA0mNTUVDmdTm3bts3bpfiMdevWqV+/fjUeBoj6lZGRoZkzZ+rAgQMNci0O4E3czQTAqwIDA9WhQwdvlwHAwggzALzqd7/7XY1raQCgLjjNBAAALI0jMwAAwNIIMwAAwNIIMwAAwNLO+ofmVVdX6/vvv1dISEitvzkDAAB8jzFGJSUlio2NrfG06N8668PM999/X+tjsAEAgO/bv3//SX84+KwPMyEhIZJ+/TBCQ0O9XA0AADgVxcXFat26tevv+Imc9WHm6Kml0NBQwgwAABZzKpeIcAEwAACwNMIMAACwNMIMAACwNK+GmYyMDNlsNrcpOjraNd8Yo4yMDMXGxiogIECpqanavn27FysGAAC+xutHZjp37qz8/HzXtHXrVte82bNna+7cuZo/f75yc3MVHR2tAQMGqKSkxIsVAwAAX+L1MOPn56fo6GjX1LJlS0m/HpWZN2+eZsyYoeHDhys5OVmLFy9WaWmpli1b5uWqAQCAr/B6mNm1a5diY2OVkJCgm266Sd98840kac+ePSooKNDAgQNdfe12u1JSUrRhwwZvlQsAAHyMV58z06tXL7300ktq3769fvjhBz322GPq06ePtm/froKCAklSVFSU25ioqCjt27fvuMssLy9XeXm563VxcXHDFA8AAHyCV8PM4MGDXf/dpUsX9e7dW+3atdPixYt18cUXS6r5sBxjzAkfoDNr1izNnDmzYQoGAAA+x+unmY4VFBSkLl26aNeuXa67mo4eoTmqsLCwxtGaY02fPl1FRUWuaf/+/Q1aMwAA8C6fCjPl5eXKy8tTTEyMEhISFB0drTVr1rjmV1RUKDs7W3369DnuMux2u+unC/gJAwAAzn5ePc103333adiwYYqLi1NhYaEee+wxFRcXa8yYMbLZbJo8ebIyMzOVmJioxMREZWZmKjAwUGlpad4sGwAA+BCvhplvv/1WI0aMkNPpVMuWLXXxxRdr48aNatOmjSRp6tSpKisr07hx43To0CH16tVLq1evPqVf0AQAAOcGmzHGeLuIhlRcXKywsDAVFRVxygkAAIuoy99vrx6ZAQBJcjgccjqdHo2NiIhQXFxcPVcEwEoIMwC8yuFwKCmpo8rKSj0aHxAQqJ078wg0wDmMMAPAq5xOp8rKStXr1nSFxsTXaWxx/l59smimnE4nYQY4hxFmAPiE0Jh4hcd18HYZACzIp54zAwAAUFeEGQAAYGmEGQAAYGlcMwPA8vLy8jwaV15eLrvd7tFYbgkHfAdhBoBllRUdlGTTqFGjPFuAzSZ5+NxQbgkHfAdhBoBlVZaWSDLqnjZNLROS6jQ2f2uOtq1a6NFYbgkHfAthBoDlBUfG1fm27uL8vR6PBeBbuAAYAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYGmEGAABYmp+3CwAAq8rLy/NoXEREhOLi4uq5GuDcRZgBgDoqKzooyaZRo0Z5ND4gIFA7d+YRaIB6QpgBgDqqLC2RZNQ9bZpaJiTVaWxx/l59smimnE4nYQaoJ4QZAPBQcGScwuM6eLsM4JznMxcAz5o1SzabTZMnT3a1GWOUkZGh2NhYBQQEKDU1Vdu3b/dekQAAwOf4RJjJzc3VwoUL1bVrV7f22bNna+7cuZo/f75yc3MVHR2tAQMGqKSkxEuVAgAAX+P1MPPzzz9r5MiRev7559W8eXNXuzFG8+bN04wZMzR8+HAlJydr8eLFKi0t1bJly7xYMQAA8CVeDzPjx4/X0KFD9fvf/96tfc+ePSooKNDAgQNdbXa7XSkpKdqwYcNxl1deXq7i4mK3CQAAnL28egHw8uXL9dlnnyk3N7fGvIKCAklSVFSUW3tUVJT27dt33GXOmjVLM2fOrN9CAQCAz/LakZn9+/dr0qRJWrJkifz9/Y/bz2azub02xtRoO9b06dNVVFTkmvbv319vNQMAAN/jtSMzmzdvVmFhoXr06OFqO3LkiNavX6/58+frq6++kvTrEZqYmBhXn8LCwhpHa45lt9tlt9sbrnAAAOBTvHZk5vLLL9fWrVu1ZcsW19SzZ0+NHDlSW7ZsUdu2bRUdHa01a9a4xlRUVCg7O1t9+vTxVtkAAMDHeO3ITEhIiJKTk93agoKC1KJFC1f75MmTlZmZqcTERCUmJiozM1OBgYFKS0vzRskAAMAH+fQTgKdOnaqysjKNGzdOhw4dUq9evbR69WqFhIR4uzQAAOAjfCrMrFu3zu21zWZTRkaGMjIyvFIPAADwfV5/zgwAAMDpIMwAAABLI8wAAABLI8wAAABLI8wAAABLI8wAAABLI8wAAABL86nnzACwLofDIafTWedxeXl5DVANcHo83Z8lKSIiQnFxcfVcEU6EMAPgtDkcDiUldVRZWanHy6gsr6jHigDPne7+HBAQqJ078wg0ZxBhBsBpczqdKisrVa9b0xUaE1+nsflbc7Rt1UJVVVU1THFAHZ3O/lycv1efLJopp9NJmDmDCDMA6k1oTLzC4zrUaUxx/t6GKQY4TZ7sz/AOLgAGAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACW5uftAgD4DofDIafTWedxeXl5DVANAJwawgwASb8GmaSkjiorK/V4GZXlFfVYEQCcGsIMAEmS0+lUWVmpet2artCY+DqNzd+ao22rFqqqqqphigOAEyDMAHATGhOv8LgOdRpTnL+3YYoBgFPABcAAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDS+G0mAPCCvLw8j8ZFREQoLi6unqsBrI0wAwBnUFnRQUk2jRo1yqPxAQGB2rkzj0ADHIMwAwBnUGVpiSSj7mnT1DIhqU5ji/P36pNFM+V0OgkzwDEIMwDgBcGRcQqP6+DtMoCzAhcAAwAASyPMAAAASyPMAAAAS+OaGeAs43A45HQ66zzO01uFAcDbCDPAWcThcCgpqaPKyko9XkZleUU9VgQADY8wA5xFnE6nyspK1evWdIXGxNdpbP7WHG1btVBVVVUNUxwANBDCDHAWCo2Jr/Ntv8X5exumGABoYFwADAAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALM2rYWbBggXq2rWrQkNDFRoaqt69e+u///2va74xRhkZGYqNjVVAQIBSU1O1fft2L1YMAAB8jVfDzHnnnacnnnhCn376qT799FP1799fV199tSuwzJ49W3PnztX8+fOVm5ur6OhoDRgwQCUlJd4sGwAA+BCvhplhw4ZpyJAhat++vdq3b6/HH39cwcHB2rhxo4wxmjdvnmbMmKHhw4crOTlZixcvVmlpqZYtW+bNsgEAgA/xmWtmjhw5ouXLl+vw4cPq3bu39uzZo4KCAg0cONDVx263KyUlRRs2bDjucsrLy1VcXOw2AQCAs5fXw8zWrVsVHBwsu92usWPH6t///rc6deqkgoICSVJUVJRb/6ioKNe82syaNUthYWGuqXXr1g1aPwAA8C6vh5kOHTpoy5Yt2rhxo+666y6NGTNGO3bscM232Wxu/Y0xNdqONX36dBUVFbmm/fv3N1jtAADA+7z+q9lNmzbV+eefL0nq2bOncnNz9fTTT2vatGmSpIKCAsXExLj6FxYW1jhacyy73S673d6wRQMAAJ/h9SMzv2WMUXl5uRISEhQdHa01a9a45lVUVCg7O1t9+vTxYoUAAMCXePXIzIMPPqjBgwerdevWKikp0fLly7Vu3Tq98847stlsmjx5sjIzM5WYmKjExERlZmYqMDBQaWlp3iwbAAD4EK+GmR9++EE333yz8vPzFRYWpq5du+qdd97RgAEDJElTp05VWVmZxo0bp0OHDqlXr15avXq1QkJCvFk2AADwIR6HmcOHDys7O1sOh0MVFRVu8+6+++5TWsYLL7xwwvk2m00ZGRnKyMjwtEz4EIfDIafT6dHYiIgIxcXF1XNFAICzgUdh5vPPP9eQIUNUWlqqw4cPKzw8XE6nU4GBgYqMjDzlMINzh8PhUFJSR5WVlXo0PiAgUDt35hFoAAA1eBRm7rnnHg0bNkwLFixQs2bNtHHjRjVp0kSjRo3SpEmT6rtGnAWcTqfKykrV69Z0hcbE12lscf5efbJoppxOJ2EGAFCDR2Fmy5Yt+sc//qHGjRurcePGKi8vV9u2bTV79myNGTNGw4cPr+86cZYIjYlXeFwHb5cBADiLeHRrdpMmTVwProuKipLD4ZAkhYWFuf4bAADgTPDoyMwFF1ygTz/9VO3bt1e/fv305z//WU6nUy+//LK6dOlS3zUCAAAcl0dHZjIzM11P5X300UfVokUL3XXXXSosLNTChQvrtUAAAIAT8ejITM+ePV3/3bJlS7399tv1VhAAAEBdeBRm+vfvrxUrVqhZs2b1XA4AAP+H51PhVHgUZtatW1fjQXkAANQnnk+FU+XxE4CP3s0EAEBD4PlUOFUeh5lrrrlGTZs2rXXe2rVrPS4IAIBj8XwqnIzHYaZ3794KDg6uz1oAAADqzKMwY7PZdP/99ysyMrK+6wEAAKgTj54zY4yp7zoAAAA84lGYSU9P5xQTAADwCR6dZkpPT5ckHThwQF999ZVsNpvat2+vli1b1mtxAAAAJ+PRkZnS0lLdeuutio2N1WWXXaa+ffsqNjZWt912m0pLPXseAAAAgCc8CjP33HOPsrOztWrVKv3000/66aef9Oabbyo7O1v33ntvfdcIAABwXB6dZnrjjTf0+uuvKzU11dU2ZMgQBQQE6IYbbtCCBQvqqz4AAIAT8vg0U1RUVI32yMhITjMBAIAzyqMw07t3b6Wnp+uXX35xtZWVlWnmzJnq3bt3vRUHAABwMh6dZpo3b54GDx6s8847T926dZPNZtOWLVvk7++vd999t75rBCRJeXl5Ho3jl3NxtvHGd4Ffr4Yv8yjMdOnSRbt27dKSJUu0c+dOGWN00003aeTIkQoICKjvGnGOKys6KMmmUaNGeTSeX87F2cJb3wV+vRq+zqMws379evXp00d33HFHfdcD1FBZWiLJqHvaNLVMSKrTWH45F2cTb30X+PVq+DqPwky/fv2Un5/PbzPhjAqOjOOXcwF577vAr1fDV/HbTAAAwNI8OjIjSTk5OWrevHmt8y677DKPCwIAAKgLj8PMNddcU2u7zWbTkSNHPC4IAACgLjw6zSRJBQUFqq6urjERZAAAwJnkUZix2Wz1XQcAAIBHuAAYAABYmkfXzFRXV9d3HQAAAB7x6MjMrFmztGjRohrtixYt0pNPPnnaRQEAAJwqj8LMP/7xDyUl1Xz6ZOfOnfXcc8+ddlEAAACnyqMwU1BQoJiYmBrtLVu2VH5+/mkXBQAAcKo8CjOtW7fWxx9/XKP9448/Vmxs7GkXBQAAcKo8ugD49ttv1+TJk1VZWan+/ftLkt5//31NnTpV9957b70WCAAAcCIehZmpU6fqxx9/1Lhx41RRUSFJ8vf317Rp0zR9+vR6LRAAAOBEPAozNptNTz75pB5++GHl5eUpICBAiYmJstvt9V0fAADACXn820ySFBwcrIsuuqi+agEAAKgzj8NMbm6uXnvtNTkcDteppqNWrFhx2oUBAACcCo/uZlq+fLkuueQS7dixQ//+979VWVmpHTt2aO3atQoLC6vvGgEAAI7LoyMzmZmZeuqppzR+/HiFhITo6aefVkJCgu68885anz8DeFteXp5H4yIiIhQXF1fP1QAA6pNHYWb37t0aOnSoJMlut+vw4cOy2Wy655571L9/f82cObNeiwQ8VVZ0UJJNo0aN8mh8QECgdu7MI9AAgA/zKMyEh4erpKREktSqVStt27ZNXbp00U8//aTS0tJ6LRA4HZWlJZKMuqdNU8uEmj/BcSLF+Xv1yaKZcjqdhBkA8GEehZm+fftqzZo16tKli2644QZNmjRJa9eu1Zo1a3T55ZfXd43AaQuOjFN4XAdvlwEAaAAehZn58+frl19+kSRNnz5dTZo00UcffaThw4fr4YcfrtcCAQAATqROYaa4uPjXQX5+Cg4Odr0eO3asxo4dW//VAQAAnESdwkyzZs1ks9lO2u/IkSMeFwQAAFAXdQozH3zwgdtrY4yGDBmif/7zn2rVqlW9FgYAAHAq6hRmUlJSarQ1btxYF198sdq2bVtvRQG+hGfU4Gziyf7s6XfAF9brLfy7cWad1m8zAWcznlGDs8np7s+SVFlecfJOPrJeb+HfDe84rTDjcDhUWlqqFi1a1Fc9gM/gGTU4m5zO/py/NUfbVi1UVVWVZdbrLfy74R11CjPPPPOM678PHDigZcuWqX///vweE85qPKMGZxNP9ufi/L2WXa+38O/GmVWnMPPUU09Jkmw2myIiInT11VfroYceapDCAAAATkWdwsyePXsaqg4AAACPNPJ2AQAAAKeDu5mABsTtmQDQ8AgzQAPg9kwAOHMIM0AD4PZMADhzCDNAA+L2TABoeF69AHjWrFm66KKLFBISosjISP3hD3/QV1995dbHGKOMjAzFxsYqICBAqamp2r59u5cqBgAAvsarYSY7O1vjx4/Xxo0btWbNGlVVVWngwIE6fPiwq8/s2bM1d+5czZ8/X7m5uYqOjtaAAQNUUlLixcoBAICv8OpppnfeecftdVZWliIjI7V582ZddtllMsZo3rx5mjFjhoYPHy5JWrx4saKiorRs2TLdeeed3igbAAD4EJ+6ZqaoqEiSFB4eLunXh/QVFBRo4MCBrj52u10pKSnasGFDrWGmvLxc5eXlrtfFxcUNXDXQMM61XxkGAE/5TJgxxmjKlCm69NJLlZycLEkqKCiQJEVFRbn1jYqK0r59+2pdzqxZszRz5syGLRZoQOfarwwDwOnymTAzYcIEffnll/roo49qzLPZbG6vjTE12o6aPn26pkyZ4npdXFys1q1b12+xQAM6135lGABOl0+EmYkTJ2rVqlVav369zjvvPFd7dHS0pF+P0MTExLjaCwsLaxytOcput8tutzdswcAZcK79yjAAeMqrdzMZYzRhwgStWLFCa9euVUJCgtv8hIQERUdHa82aNa62iooKZWdnq0+fPme6XAAA4IO8emRm/PjxWrZsmd58802FhIS4rpEJCwtTQECAbDabJk+erMzMTCUmJioxMVGZmZkKDAxUWlqaN0sHAAA+wqthZsGCBZKk1NRUt/asrCzdcsstkqSpU6eqrKxM48aN06FDh9SrVy+tXr1aISEhZ7haAADgi7waZowxJ+1js9mUkZGhjIyMhi8IAHBW4REH5wafuAAYAID6xCMOzi2EGQDAWYdHHJxbCDMAgLMWjzg4N3j11mwAAIDTRZgBAACWRpgBAACWxjUz5yCHwyGn0+nR2IiICMXFxdVzRQAAeI4wc45xOBxKSuqosrJSj8YHBARq5848Ag0AwGcQZs4xTqdTZWWl6nVrukJj4us0tjh/rz5ZNFNOp5MwAwDwGYSZc1RoTHydb1cEAMAXcQEwAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwNMIMAACwND9vFwDrycvLOyNjAAA4FYQZnLKyooOSbBo1apTHy6gsr6i/ggAAEGEGdVBZWiLJqHvaNLVMSKrT2PytOdq2aqGqqqoapjgAwDmLMIM6C46MU3hchzqNKc7f2zDFAADOeVwADAAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALI0wAwAALM2rYWb9+vUaNmyYYmNjZbPZtHLlSrf5xhhlZGQoNjZWAQEBSk1N1fbt271TLAAA8EleDTOHDx9Wt27dNH/+/Frnz549W3PnztX8+fOVm5ur6OhoDRgwQCUlJWe4UgAA4Kv8vLnywYMHa/DgwbXOM8Zo3rx5mjFjhoYPHy5JWrx4saKiorRs2TLdeeedZ7JUAADgo3z2mpk9e/aooKBAAwcOdLXZ7XalpKRow4YNxx1XXl6u4uJitwkAAJy9fDbMFBQUSJKioqLc2qOiolzzajNr1iyFhYW5ptatWzdonQAAwLt8NswcZbPZ3F4bY2q0HWv69OkqKipyTfv372/oEgEAgBd59ZqZE4mOjpb06xGamJgYV3thYWGNozXHstvtstvtDV4fAADwDT57ZCYhIUHR0dFas2aNq62iokLZ2dnq06ePFysDAAC+xKtHZn7++Wf973//c73es2ePtmzZovDwcMXFxWny5MnKzMxUYmKiEhMTlZmZqcDAQKWlpXmxagAA4Eu8GmY+/fRT9evXz/V6ypQpkqQxY8boxRdf1NSpU1VWVqZx48bp0KFD6tWrl1avXq2QkBBvlQwAAHyMV8NMamqqjDHHnW+z2ZSRkaGMjIwzV5RFOBwOOZ3OOo/Ly8trgGoAAPAen70AGMfncDiUlNRRZWWlHi+jsryiHisCAMB7CDMW5HQ6VVZWql63pis0Jr5OY/O35mjbqoWqqqpqmOIAADjDCDMWFhoTr/C4DnUaU5y/t2GKAQDAS3z21mwAAIBTQZgBAACWRpgBAACWxjUzAAD4EE8foREREaG4uLh6rsYaCDMAAPiAsqKDkmwaNWqUR+MDAgK1c2feORloCDMAAPiAytISSUbd06apZUJSncYW5+/VJ4tmyul0EmYAAIB3BUfG1fmxG+c6LgAGAACWRpgBAACWRpgBAACWxjUzAACcJc7V27oJMwAAWNy5fls3YQYAAIs712/rJswAAHCWOFdv6+YCYAAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGl+3i7gXOZwOOR0Ous8Li8vrwGqAQDAmggzXuJwOJSU1FFlZaUeL6OyvKIeKwIAwJoIM17idDpVVlaqXremKzQmvk5j87fmaNuqhaqqqmqY4gAAsBDCjJeFxsQrPK5DncYU5+9tmGIAALAgLgAGAACWRpgBAACWRpgBAACWxjUzAADA48d+REREKC4urp6rqRvCDAAA57CyooOSbBo1apRH4wMCArVzZ55XAw1hBgCAc1hlaYkko+5p09QyIalOY4vz9+qTRTPldDoJMwAAwLuCI+Pq/KgQX8EFwAAAwNIIMwAAwNIIMwAAwNIIMwAAwNK4APg0ORwOOZ3OOo/z9H5+AADgjjBzGhwOh5KSOqqsrNTjZVSWV9RjRQAAnHsIM6fB6XSqrKxUvW5NV2hMfJ3G5m/N0bZVC1VVVdUwxQEAcI6wRJj5+9//rjlz5ig/P1+dO3fWvHnz1LdvX2+X5RIaE1/ne/OL8/c2TDEAAJxjfP4C4FdeeUWTJ0/WjBkz9Pnnn6tv374aPHiwHA6Ht0sDAAA+wOfDzNy5c3Xbbbfp9ttvV8eOHTVv3jy1bt1aCxYs8HZpAADAB/h0mKmoqNDmzZs1cOBAt/aBAwdqw4YNXqoKAAD4Ep++ZsbpdOrIkSOKiopya4+KilJBQUGtY8rLy1VeXu56XVRUJEkqLi6u9/p+/vlnSdKP+75SVXlZncYW5++TJBV9t0tN/GyMZSxjGctYxlpvbMGvl3z8/PPP9f539ujyjDEn72x82HfffWckmQ0bNri1P/bYY6ZDhw61jklPTzeSmJiYmJiYmM6Caf/+/SfNCz59ZCYiIkKNGzeucRSmsLCwxtGao6ZPn64pU6a4XldXV+vHH39UixYtZLPVLXEeT3FxsVq3bq39+/crNDS0XpaJ+sP28W1sH9/G9vFd59q2McaopKREsbGxJ+3r02GmadOm6tGjh9asWaNrrrnG1b5mzRpdffXVtY6x2+2y2+1ubc2aNWuQ+kJDQ8+JHcqq2D6+je3j29g+vutc2jZhYWGn1M+nw4wkTZkyRTfffLN69uyp3r17a+HChXI4HBo7dqy3SwMAAD7A58PMjTfeqIMHD+qRRx5Rfn6+kpOT9fbbb6tNmzbeLg0AAPgAnw8zkjRu3DiNGzfO22W42O12paen1zidBd/A9vFtbB/fxvbxXWyb47MZcyr3PAEAAPgmn35oHgAAwMkQZgAAgKURZgAAgKURZgAAgKURZjzw97//XQkJCfL391ePHj304Ycferuks8qsWbN00UUXKSQkRJGRkfrDH/6gr776yq2PMUYZGRmKjY1VQECAUlNTtX37drc+5eXlmjhxoiIiIhQUFKSrrrpK3377rVufQ4cO6eabb1ZYWJjCwsJ0880366effmrot3hWmTVrlmw2myZPnuxqY/t413fffadRo0apRYsWCgwMVPfu3bV582bXfLaP91RVVemhhx5SQkKCAgIC1LZtWz3yyCOqrq529WH7eOD0fj3p3LN8+XLTpEkT8/zzz5sdO3aYSZMmmaCgILNv3z5vl3bWuOKKK0xWVpbZtm2b2bJlixk6dKiJi4szP//8s6vPE088YUJCQswbb7xhtm7dam688UYTExNjiouLXX3Gjh1rWrVqZdasWWM+++wz069fP9OtWzdTVVXl6jNo0CCTnJxsNmzYYDZs2GCSk5PNlVdeeUbfr5Vt2rTJxMfHm65du5pJkya52tk+3vPjjz+aNm3amFtuucV88sknZs+ePea9994z//vf/1x92D7e89hjj5kWLVqYt956y+zZs8e89tprJjg42MybN8/Vh+1Td4SZOvrd735nxo4d69aWlJRkHnjgAS9VdPYrLCw0kkx2drYxxpjq6moTHR1tnnjiCVefX375xYSFhZnnnnvOGGPMTz/9ZJo0aWKWL1/u6vPdd9+ZRo0amXfeeccYY8yOHTuMJLNx40ZXn5ycHCPJ7Ny580y8NUsrKSkxiYmJZs2aNSYlJcUVZtg+3jVt2jRz6aWXHnc+28e7hg4dam699Va3tuHDh5tRo0YZY9g+nuI0Ux1UVFRo8+bNGjhwoFv7wIEDtWHDBi9VdfYrKiqSJIWHh0uS9uzZo4KCArftYLfblZKS4toOmzdvVmVlpVuf2NhYJScnu/rk5OQoLCxMvXr1cvW5+OKLFRYWxvY8BePHj9fQoUP1+9//3q2d7eNdq1atUs+ePXX99dcrMjJSF1xwgZ5//nnXfLaPd1166aV6//339fXXX0uSvvjiC3300UcaMmSIJLaPpyzxBGBf4XQ6deTIkRq/2B0VFVXjl71RP4wxmjJlii699FIlJydLkuuzrm077Nu3z9WnadOmat68eY0+R8cXFBQoMjKyxjojIyPZniexfPlyffbZZ8rNza0xj+3jXd98840WLFigKVOm6MEHH9SmTZt09913y263a/To0WwfL5s2bZqKioqUlJSkxo0b68iRI3r88cc1YsQISXx/PEWY8YDNZnN7bYyp0Yb6MWHCBH355Zf66KOPaszzZDv8tk9t/dmeJ7Z//35NmjRJq1evlr+//3H7sX28o7q6Wj179lRmZqYk6YILLtD27du1YMECjR492tWP7eMdr7zyipYsWaJly5apc+fO2rJliyZPnqzY2FiNGTPG1Y/tUzecZqqDiIgINW7cuEaqLSwsrJGicfomTpyoVatW6YMPPtB5553nao+OjpakE26H6OhoVVRU6NChQyfs88MPP9RY74EDB9ieJ7B582YVFhaqR48e8vPzk5+fn7Kzs/XMM8/Iz8/P9dmxfbwjJiZGnTp1cmvr2LGjHA6HJL4/3nb//ffrgQce0E033aQuXbro5ptv1j333KNZs2ZJYvt4ijBTB02bNlWPHj20Zs0at/Y1a9aoT58+Xqrq7GOM0YQJE7RixQqtXbtWCQkJbvMTEhIUHR3tth0qKiqUnZ3t2g49evRQkyZN3Prk5+dr27Ztrj69e/dWUVGRNm3a5OrzySefqKioiO15Apdffrm2bt2qLVu2uKaePXtq5MiR2rJli9q2bcv28aJLLrmkxqMMvv76a7Vp00YS3x9vKy0tVaNG7n96Gzdu7Lo1m+3jIS9cdGxpR2/NfuGFF8yOHTvM5MmTTVBQkNm7d6+3Sztr3HXXXSYsLMysW7fO5Ofnu6bS0lJXnyeeeMKEhYWZFStWmK1bt5oRI0bUeuvieeedZ9577z3z2Wefmf79+9d662LXrl1NTk6OycnJMV26dDlrb11sSMfezWQM28ebNm3aZPz8/Mzjjz9udu3aZZYuXWoCAwPNkiVLXH3YPt4zZswY06pVK9et2StWrDARERFm6tSprj5sn7ojzHjg2WefNW3atDFNmzY1F154oeuWYdQPSbVOWVlZrj7V1dUmPT3dREdHG7vdbi677DKzdetWt+WUlZWZCRMmmPDwcBMQEGCuvPJK43A43PocPHjQjBw50oSEhJiQkBAzcuRIc+jQoTPwLs8uvw0zbB/v+s9//mOSk5ON3W43SUlJZuHChW7z2T7eU1xcbCZNmmTi4uKMv7+/adu2rZkxY4YpLy939WH71J3NGGO8eWQIAADgdHDNDAAAsDTCDAAAsDTCDAAAsDTCDAAAsDTCDAAAsDTCDAAAsDTCDAAAsDTCDAAAsDTCDACPVFdXKy0tTe3atVNAQICaN2+uSy65RMuWLfN2aQDOMX7eLgCAdcXExOill15SfHy8SktLtWHDBt1xxx0qKSnRnXfe6e3yAJwjODIDwCONGjXSX//6V11yySVq1aqVEhMTNWbMGF1xxRXKzs6WJMXHx2vevHlu42655Rb94Q9/cL1+5513dOmll6pZs2Zq0aKFrrzySu3evds1/8UXX1SzZs3clpGamqrJkye7XldUVGjq1Klq1aqVgoKC1KtXL61bt+6Ey9i7d69sNpu2bNkiSVq3bp1sNpt++uknV59Ro0bJZrNp5cqVrracnBz17t1bwcHBstlsstls6t69+yl+agAaAmEGQL0wxig3N1cff/yxBg0adMrjDh8+rClTpig3N1fvv/++GjVqpGuuuUbV1dWnvIw//vGP+vjjj7V8+XJ9+eWXuv766zVo0CDt2rXLk7ciSdq8ebP+85//1Gi/7rrr1Lp1a33++efKz8/Xvffe6/E6ANQPwgyA0/LKK68oODhYTZs2Va9evTR27FiNHj36lMdfe+21Gj58uBITE9W9e3e98MIL2rp1q3bs2CFJCggI0C+//HLc8bt379a//vUvvfbaa+rbt6/atWun++67T5deeqmysrI8fl9TpkzR/fff79ZWWFio77//XpMnT1ZiYqKio6MVHBzs8ToA1A/CDIDTMnToUG3ZskWbNm3Ss88+q3nz5um5555zzZ82bZqCg4Nd09KlS93G7969W2lpaWrbtq1CQ0OVkJAgSXI4HJKkTp06qby8XG+88Uat6//ss89kjFH79u3d1pOdne12uqqoqMhtfufOnY/7nlauXKlvvvmmxlGX8PBwhYWF6dVXX1VlZWXdPigADYYLgAGcluDgYJ1//vmSpAsuuEAHDx7UX/7yF40dO1aSdP/99+uWW25x9Z82bZqOHDniej1s2DC1bt1azz//vGJjY1VdXa3k5GRVVFRIkrp06aL7779f119/vfz9/dWoUSOVlZW5rlOprq5W48aNtXnzZjVu3LhGbUeFhITos88+c73+7rvvlJqaWuP9VFZWaurUqXr88ccVEBDgNs/Pz08vv/yyxo0bp/nz58vf318VFRXq1KlT3T84APWGMAOgXlVXV8sY43odERHhCjvSr6Hi6EW2Bw8eVF5env7xj3+ob9++kqSPPvqoxjJnz56thx56SIWFhZKkkSNHuuZdcMEFOnLkiAoLC13LqE2jRo3c6vDzq/2fvwULFig4OFg333xzrfOHDRumZcuW6ZdfftGcOXP0zDPPaP369cddL4CGR5gB4JH9+/frwQcf1B//+EclJiaqtLRU69ev15w5c5Senn5Ky2jevLlatGihhQsXKiYmRg6HQw888ECtfUNDQxUaGipJbkdM2rdvr5EjR2r06NH661//qgsuuEBOp1Nr165Vly5dNGTIkDq9r9mzZ2vVqlWy2Wy1zn/qqae0efNm5ebmKiwsTOHh4XVaPoD6R5gB4JFmzZrJbrdr0qRJ2rt3r5o2baquXbvqxRdf1LXXXntKy2jUqJGWL1+uu+++W8nJyerQoYOeeeaZWk//nEhWVpYee+wx3Xvvvfruu+/UokUL9e7du85BRpL69eun/v371zrvo48+0syZM/Xhhx8qLCyszssG0DBs5tjjwQAAABbD3UwAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDSCDMAAMDS/j9gMOerWMHpRAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data=df, x= target, bins=30)  # bins - количество интервалов на гистограмме\n",
    "plt.xlabel('Значения')\n",
    "plt.ylabel('Частота')\n",
    "plt.title('Гистограмма целевого признака')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x= target, data=df)\n",
    "plt.ylabel('Значения')\n",
    "plt.title('Ящик с усами для целевой переменной')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Для переменной cnt выбросов не обнаружено.\n"
     ]
    }
   ],
   "source": [
    "q1 = df[target].quantile(0.25)\n",
    "q3 = df[target].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "lower_bound = q1 - 1.5 * iqr\n",
    "upper_bound = q3 + 1.5 * iqr\n",
    "\n",
    "outliers = df[(df[target] < lower_bound) | (df[target] > upper_bound)]\n",
    "if not outliers.empty:\n",
    "    print(f\"Для переменной {target} обнаружены выбросы:\")\n",
    "    print(outliers)\n",
    "else:\n",
    "    print(f\"Для переменной {target} выбросов не обнаружено.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed(mph)</th>\n",
       "      <th>windspeed(ms)</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>4.805490</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>7.443949</td>\n",
       "      <td>801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>7.437060</td>\n",
       "      <td>1349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>4.800998</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>5.597810</td>\n",
       "      <td>1600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10.420847</td>\n",
       "      <td>11.33210</td>\n",
       "      <td>65.2917</td>\n",
       "      <td>23.458911</td>\n",
       "      <td>10.486773</td>\n",
       "      <td>2114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>727</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10.386653</td>\n",
       "      <td>12.75230</td>\n",
       "      <td>59.0000</td>\n",
       "      <td>10.416557</td>\n",
       "      <td>4.656485</td>\n",
       "      <td>3095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10.386653</td>\n",
       "      <td>12.12000</td>\n",
       "      <td>75.2917</td>\n",
       "      <td>8.333661</td>\n",
       "      <td>3.725374</td>\n",
       "      <td>1341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>729</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10.489153</td>\n",
       "      <td>11.58500</td>\n",
       "      <td>48.3333</td>\n",
       "      <td>23.500518</td>\n",
       "      <td>10.505372</td>\n",
       "      <td>1796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>730</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8.849153</td>\n",
       "      <td>11.17435</td>\n",
       "      <td>57.7500</td>\n",
       "      <td>10.374682</td>\n",
       "      <td>4.637766</td>\n",
       "      <td>2729</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>731 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
       "0         1   0     1        0        6           0           2  14.110847   \n",
       "1         1   0     1        0        0           0           2  14.902598   \n",
       "2         1   0     1        0        1           1           1   8.050924   \n",
       "3         1   0     1        0        2           1           1   8.200000   \n",
       "4         1   0     1        0        3           1           1   9.305237   \n",
       "..      ...  ..   ...      ...      ...         ...         ...        ...   \n",
       "726       1   1    12        0        4           1           2  10.420847   \n",
       "727       1   1    12        0        5           1           2  10.386653   \n",
       "728       1   1    12        0        6           0           2  10.386653   \n",
       "729       1   1    12        0        0           0           1  10.489153   \n",
       "730       1   1    12        0        1           1           2   8.849153   \n",
       "\n",
       "        atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
       "0    18.18125  80.5833       10.749882       4.805490   985  \n",
       "1    17.68695  69.6087       16.652113       7.443949   801  \n",
       "2     9.47025  43.7273       16.636703       7.437060  1349  \n",
       "3    10.60610  59.0435       10.739832       4.800998  1562  \n",
       "4    11.46350  43.6957       12.522300       5.597810  1600  \n",
       "..        ...      ...             ...            ...   ...  \n",
       "726  11.33210  65.2917       23.458911      10.486773  2114  \n",
       "727  12.75230  59.0000       10.416557       4.656485  3095  \n",
       "728  12.12000  75.2917        8.333661       3.725374  1341  \n",
       "729  11.58500  48.3333       23.500518      10.505372  1796  \n",
       "730  11.17435  57.7500       10.374682       4.637766  2729  \n",
       "\n",
       "[731 rows x 13 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Ответ:__  Как видно из получившегося графика как гистограммы, так и ящика с усами (я сделала его для более точной оценки выбросов, на нем это лучше видно), выбросы отсутствуют, никакие дополнительные манипуляции по очистке данных не требуются. Дополнительно я аналитически проверила наличие выбросов -- они не были обнаружены. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__г) [5 баллов]__ Давайте посмотрим на то, как переменные коррелируют с таргетом. Для этого постройте соответствующую облака рассеивания. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(16, 10))\n",
    "axes = axes.flatten()\n",
    "\n",
    "for i, col in enumerate(df.columns):\n",
    "    if col != target:\n",
    "        sns.scatterplot(x=col, y= target, data=df, ax=axes[i])\n",
    "        axes[i].set_xlabel(col)\n",
    "        axes[i].set_ylabel('target')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__д) [5 баллов]__ Каков характер зависимости числа прокатов от месяца? От каких признаков спрос зависит линейно? \n",
    "\n",
    "__Ответ:__  Как видно из графика, количество арендованных велосипедов особо не зависит от месяца - хотя, действительно, в летние месяцы минимальное число прокатов оказывается больше зимних месяцев. В целом, это асимптотически равномерное распределение. \n",
    "Касательно линейной связи: что-то похожее на линейную связь можно наблюдать на диаграмме рассеивания для температуры (как фактической, так и ощущаемой). В остальных случаях распределение либо едва ли указывает на линейную связь, либо это невозможно, потому что переменные являются категориальными. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__е) [5 баллов]__ Постройте гистограммы для всех непрерывных переменных. Что можете сказать о выбросах? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "numeric_cols = df.select_dtypes(include=['float64']).columns\n",
    "\n",
    "fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(16, 10))\n",
    "axes = axes.flatten()\n",
    "\n",
    "for i, col in enumerate(numeric_cols):\n",
    "    plt.sca(axes[i])\n",
    "    sns.histplot(data=df, x=col, bins=20)\n",
    "    plt.xlabel(col)\n",
    "    plt.ylabel('Частота')\n",
    "    plt.title(f'Гистограмма для переменной {col}')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Для переменной temp выбросов не обнаружено.\n",
      "Для переменной atemp выбросов не обнаружено.\n",
      "Для переменной hum обнаружены выбросы:\n",
      "    season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
      "49       1   0     2        0        6           0           1  16.365847   \n",
      "68       1   0     3        0        4           1           3  15.952731   \n",
      "\n",
      "      atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
      "49  19.5702  18.7917       34.000021      15.198937  1635  \n",
      "68  19.2834   0.0000       17.545759       7.843433   623  \n",
      "Для переменной windspeed(mph) обнаружены выбросы:\n",
      "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
      "44        1   0     2        0        1           1           1  17.015000   \n",
      "49        1   0     2        0        6           0           1  16.365847   \n",
      "93        2   0     4        0        1           1           1  23.506653   \n",
      "94        2   0     4        0        2           1           2  16.980847   \n",
      "292       4   0    10        0        4           1           1  19.509153   \n",
      "382       1   1     1        0        3           1           1  12.436653   \n",
      "407       1   1     2        0        0           0           1   5.227500   \n",
      "420       1   1     2        0        6           0           1  11.924153   \n",
      "432       1   1     3        0        4           1           1  21.627500   \n",
      "433       1   1     3        0        5           1           2  16.844153   \n",
      "450       2   1     3        0        1           1           1  18.279153   \n",
      "666       4   1    10        0        0           0           2  19.577500   \n",
      "721       1   1    12        0        6           0           1  10.899153   \n",
      "\n",
      "        atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
      "44   19.91750  37.5833       27.999836      12.516690  1913  \n",
      "49   19.57020  18.7917       34.000021      15.198937  1635  \n",
      "93   27.14645  42.6250       25.833257      11.548170  3115  \n",
      "94   19.91750  64.2083       26.000489      11.622928  1795  \n",
      "292  23.32625  63.6250       28.292425      12.647485  4195  \n",
      "382  13.76270  44.3333       27.833743      12.442442  3376  \n",
      "407   5.08290  46.4583       27.417204      12.256238  1529  \n",
      "420  12.78375  39.5833       28.250014      12.628527  2732  \n",
      "432  26.23020  56.7500       29.584721      13.225177  5382  \n",
      "433  19.85415  40.7083       27.791600      12.423603  4569  \n",
      "450  21.93750  47.7917       25.917007      11.585609  5558  \n",
      "666  23.38855  69.4583       26.666536      11.920669  4459  \n",
      "721  11.80565  44.1250       27.292182      12.200350  1749  \n",
      "Для переменной windspeed(ms) обнаружены выбросы:\n",
      "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
      "44        1   0     2        0        1           1           1  17.015000   \n",
      "49        1   0     2        0        6           0           1  16.365847   \n",
      "93        2   0     4        0        1           1           1  23.506653   \n",
      "94        2   0     4        0        2           1           2  16.980847   \n",
      "292       4   0    10        0        4           1           1  19.509153   \n",
      "382       1   1     1        0        3           1           1  12.436653   \n",
      "407       1   1     2        0        0           0           1   5.227500   \n",
      "420       1   1     2        0        6           0           1  11.924153   \n",
      "432       1   1     3        0        4           1           1  21.627500   \n",
      "433       1   1     3        0        5           1           2  16.844153   \n",
      "450       2   1     3        0        1           1           1  18.279153   \n",
      "666       4   1    10        0        0           0           2  19.577500   \n",
      "721       1   1    12        0        6           0           1  10.899153   \n",
      "\n",
      "        atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
      "44   19.91750  37.5833       27.999836      12.516690  1913  \n",
      "49   19.57020  18.7917       34.000021      15.198937  1635  \n",
      "93   27.14645  42.6250       25.833257      11.548170  3115  \n",
      "94   19.91750  64.2083       26.000489      11.622928  1795  \n",
      "292  23.32625  63.6250       28.292425      12.647485  4195  \n",
      "382  13.76270  44.3333       27.833743      12.442442  3376  \n",
      "407   5.08290  46.4583       27.417204      12.256238  1529  \n",
      "420  12.78375  39.5833       28.250014      12.628527  2732  \n",
      "432  26.23020  56.7500       29.584721      13.225177  5382  \n",
      "433  19.85415  40.7083       27.791600      12.423603  4569  \n",
      "450  21.93750  47.7917       25.917007      11.585609  5558  \n",
      "666  23.38855  69.4583       26.666536      11.920669  4459  \n",
      "721  11.80565  44.1250       27.292182      12.200350  1749  \n"
     ]
    }
   ],
   "source": [
    "for i, col in enumerate(numeric_cols):    \n",
    "    q1 = df[col].quantile(0.25)\n",
    "    q3 = df[col].quantile(0.75)\n",
    "    iqr = q3 - q1\n",
    "    lower_bound = q1 - 1.5 * iqr\n",
    "    upper_bound = q3 + 1.5 * iqr\n",
    "\n",
    "    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]\n",
    "    if not outliers.empty:\n",
    "        print(f\"Для переменной {col} обнаружены выбросы:\")\n",
    "        print(outliers)\n",
    "    else:\n",
    "        print(f\"Для переменной {col} выбросов не обнаружено.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы можем наблюдать из результатов, выбросы есть в переменной hum и windspeed. Для показателей температуры выбросов нет. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Очистим данные от выбросов в переменных hum и windspeed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "q1 = df['hum'].quantile(0.25)\n",
    "q3 = df['hum'].quantile(0.75)\n",
    "iqr1 = q3 - q1\n",
    "lower_bound1 = q1 - 1.5 * iqr1\n",
    "upper_bound1 = q3 + 1.5 * iqr1\n",
    "\n",
    "q2 = df['windspeed(mph)'].quantile(0.25)\n",
    "q4 = df['windspeed(mph)'].quantile(0.75)\n",
    "iqr2 = q4 - q2\n",
    "lower_bound2 = q2 - 1.5 * iqr2\n",
    "upper_bound2 = q4 + 1.5 * iqr2\n",
    "\n",
    "q5 = df['windspeed(ms)'].quantile(0.25)\n",
    "q6 = df['windspeed(ms)'].quantile(0.75)\n",
    "iqr3 = q6 - q5\n",
    "lower_bound3 = q5 - 1.5 * iqr3\n",
    "upper_bound3 = q6 + 1.5 * iqr3\n",
    "\n",
    "df = df[(df['hum'] >= lower_bound1) & (df['hum'] <= upper_bound1)]\n",
    "df = df[(df['windspeed(mph)'] >= lower_bound3) & (df['windspeed(mph)'] <= upper_bound3)]\n",
    "df = df[(df['windspeed(ms)'] >= lower_bound2) & (df['windspeed(ms)'] <= upper_bound2)]\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed(mph)</th>\n",
       "      <th>windspeed(ms)</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>4.805490</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>4.800998</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.378268</td>\n",
       "      <td>11.66045</td>\n",
       "      <td>51.8261</td>\n",
       "      <td>6.000868</td>\n",
       "      <td>2.682552</td>\n",
       "      <td>1606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8.057402</td>\n",
       "      <td>10.44195</td>\n",
       "      <td>49.8696</td>\n",
       "      <td>11.304642</td>\n",
       "      <td>5.053483</td>\n",
       "      <td>1510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6.932731</td>\n",
       "      <td>9.57320</td>\n",
       "      <td>68.6364</td>\n",
       "      <td>8.182844</td>\n",
       "      <td>3.657954</td>\n",
       "      <td>1263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>723</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.483464</td>\n",
       "      <td>12.94500</td>\n",
       "      <td>79.1304</td>\n",
       "      <td>5.174437</td>\n",
       "      <td>2.313114</td>\n",
       "      <td>920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>724</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.943464</td>\n",
       "      <td>14.72325</td>\n",
       "      <td>73.4783</td>\n",
       "      <td>11.304642</td>\n",
       "      <td>5.053483</td>\n",
       "      <td>1013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>727</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10.386653</td>\n",
       "      <td>12.75230</td>\n",
       "      <td>59.0000</td>\n",
       "      <td>10.416557</td>\n",
       "      <td>4.656485</td>\n",
       "      <td>3095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10.386653</td>\n",
       "      <td>12.12000</td>\n",
       "      <td>75.2917</td>\n",
       "      <td>8.333661</td>\n",
       "      <td>3.725374</td>\n",
       "      <td>1341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>730</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8.849153</td>\n",
       "      <td>11.17435</td>\n",
       "      <td>57.7500</td>\n",
       "      <td>10.374682</td>\n",
       "      <td>4.637766</td>\n",
       "      <td>2729</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>326 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
       "0         1   0     1        0        6           0           2  14.110847   \n",
       "3         1   0     1        0        2           1           1   8.200000   \n",
       "5         1   0     1        0        4           1           1   8.378268   \n",
       "6         1   0     1        0        5           1           2   8.057402   \n",
       "10        1   0     1        0        2           1           2   6.932731   \n",
       "..      ...  ..   ...      ...      ...         ...         ...        ...   \n",
       "723       1   1    12        0        1           1           2   9.483464   \n",
       "724       1   1    12        1        2           0           2  11.943464   \n",
       "727       1   1    12        0        5           1           2  10.386653   \n",
       "728       1   1    12        0        6           0           2  10.386653   \n",
       "730       1   1    12        0        1           1           2   8.849153   \n",
       "\n",
       "        atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
       "0    18.18125  80.5833       10.749882       4.805490   985  \n",
       "3    10.60610  59.0435       10.739832       4.800998  1562  \n",
       "5    11.66045  51.8261        6.000868       2.682552  1606  \n",
       "6    10.44195  49.8696       11.304642       5.053483  1510  \n",
       "10    9.57320  68.6364        8.182844       3.657954  1263  \n",
       "..        ...      ...             ...            ...   ...  \n",
       "723  12.94500  79.1304        5.174437       2.313114   920  \n",
       "724  14.72325  73.4783       11.304642       5.053483  1013  \n",
       "727  12.75230  59.0000       10.416557       4.656485  3095  \n",
       "728  12.12000  75.2917        8.333661       3.725374  1341  \n",
       "730  11.17435  57.7500       10.374682       4.637766  2729  \n",
       "\n",
       "[326 rows x 13 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на выбросы вновь. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Для переменной temp выбросов не обнаружено.\n",
      "Для переменной atemp выбросов не обнаружено.\n",
      "Для переменной hum выбросов не обнаружено.\n",
      "Для переменной windspeed(mph) обнаружены выбросы:\n",
      "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
      "279       4   0    10        0        5           1           1  20.944153   \n",
      "\n",
      "       atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
      "279  25.2202  68.4167        1.500244        0.67065  4985  \n",
      "Для переменной windspeed(ms) обнаружены выбросы:\n",
      "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
      "279       4   0    10        0        5           1           1  20.944153   \n",
      "\n",
      "       atemp      hum  windspeed(mph)  windspeed(ms)   cnt  \n",
      "279  25.2202  68.4167        1.500244        0.67065  4985  \n"
     ]
    }
   ],
   "source": [
    "for i, col in enumerate(numeric_cols):    \n",
    "    q1 = df[col].quantile(0.25)\n",
    "    q3 = df[col].quantile(0.75)\n",
    "    iqr = q3 - q1\n",
    "    lower_bound = q1 - 1.5 * iqr\n",
    "    upper_bound = q3 + 1.5 * iqr\n",
    "\n",
    "    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]\n",
    "    if not outliers.empty:\n",
    "        print(f\"Для переменной {col} обнаружены выбросы:\")\n",
    "        print(outliers)\n",
    "    else:\n",
    "        print(f\"Для переменной {col} выбросов не обнаружено.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Почистим от выбросов еще раз. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "q1 = df['hum'].quantile(0.25)\n",
    "q3 = df['hum'].quantile(0.75)\n",
    "iqr1 = q3 - q1\n",
    "lower_bound1 = q1 - 1.5 * iqr1\n",
    "upper_bound1 = q3 + 1.5 * iqr1\n",
    "\n",
    "q2 = df['windspeed(mph)'].quantile(0.25)\n",
    "q4 = df['windspeed(mph)'].quantile(0.75)\n",
    "iqr2 = q4 - q2\n",
    "lower_bound2 = q2 - 1.5 * iqr2\n",
    "upper_bound2 = q4 + 1.5 * iqr2\n",
    "\n",
    "q5 = df['windspeed(ms)'].quantile(0.25)\n",
    "q6 = df['windspeed(ms)'].quantile(0.75)\n",
    "iqr3 = q6 - q5\n",
    "lower_bound3 = q5 - 1.5 * iqr3\n",
    "upper_bound3 = q6 + 1.5 * iqr3\n",
    "\n",
    "df = df[(df['hum'] >= lower_bound1) & (df['hum'] <= upper_bound1)]\n",
    "df = df[(df['windspeed(mph)'] >= lower_bound3) & (df['windspeed(mph)'] <= upper_bound3)]\n",
    "df = df[(df['windspeed(ms)'] >= lower_bound2) & (df['windspeed(ms)'] <= upper_bound2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Для переменной temp выбросов не обнаружено.\n",
      "Для переменной atemp выбросов не обнаружено.\n",
      "Для переменной hum выбросов не обнаружено.\n",
      "Для переменной windspeed(mph) выбросов не обнаружено.\n",
      "Для переменной windspeed(ms) выбросов не обнаружено.\n"
     ]
    }
   ],
   "source": [
    "for i, col in enumerate(numeric_cols):    \n",
    "    q1 = df[col].quantile(0.25)\n",
    "    q3 = df[col].quantile(0.75)\n",
    "    iqr = q3 - q1\n",
    "    lower_bound = q1 - 1.5 * iqr\n",
    "    upper_bound = q3 + 1.5 * iqr\n",
    "\n",
    "    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]\n",
    "    if not outliers.empty:\n",
    "        print(f\"Для переменной {col} обнаружены выбросы:\")\n",
    "        print(outliers)\n",
    "    else:\n",
    "        print(f\"Для переменной {col} выбросов не обнаружено.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ура-ура, все очищено от выбросов:)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__ж) [5 баллов]__ Постройте между непрерывными признаками корреляционную матрицу. Нарисуйте её. Какие признаки, скорее всего, неинформативны? Почему они на ваш взгляд такие? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr_matrix = df[numeric_cols].corr()\n",
    "\n",
    "# Визуализация корреляционной матрицы\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(corr_matrix, annot=True, vmin=-1, vmax=1)\n",
    "sns.color_palette(\"magma\", as_cmap=True)\n",
    "plt.title('Корреляционная матрица')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Ответ:__ Как можем заметить из полученной тепловой карты, неинформативны будут признаки, которые по существу дублируют смыслы друг друга: так, например, можно оставить только один из признаков скорости, потому что есть четкая линейная связь между переводом шкалы миль в метры в секунду (поэтому там корреляция ровно 1). Также на самом деле нам достаточна информация лишь об одном показателе температуры: колебания между ощущаемой температурой и реальной так малы (это буквально 1), что ими можно пренебречь и взять за основу просто показатель температуры, наблюдаемый объективно. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('windspeed(mph)', axis = 1) \n",
    "\n",
    "df = df.drop('atemp', axis = 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(37, 11)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__з) [5 баллов]__ Постройте для всех категориальных переменных _countplot_. Что интересного вы видите в распределеии этих признаков?  Встречаются ли слишком обширные категории, в которых очень маленькие части нам придётся объединять в категорию \"другое\"? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(16, 10))\n",
    "axes = axes.flatten()\n",
    "\n",
    "for i, col in enumerate(var_cat):\n",
    "    plt.sca(axes[i])\n",
    "    sns.countplot(data=df, x=col)\n",
    "    plt.xlabel(col)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Ответ:__  Можем заметить, что после удаления выбросов стали видны некоторые закономерности (поверьте на слово, что без их удаления распределения больше похожи на равномерные): так, например, летом и осенью велосипеды арендуют чаще (что логично), и это видно из распределения переменной по месяцам и по сезонам. Асимптотически распределения ОТНОСИТЕЛЬНО стремятся к равномерному, а распределение месяцев - скорее к нормальному, скошенному вправо. Видно большое различие в переменных по категориям дней - праздник/не праздник и рабочий/выходной. Из интересного - в переменной по погоде есть всего три категории результатов, хотя ожидалось, что их будет 4. В данном случае можно объединить этот признак всего в 2 категории - \"плохая\" погода и \"хорошая\", потому что чрезмерно мелкое деление не приносит значимых улучшений в понимании структуры данных. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__и) [5 баллов]__  Сделайте OHE-кодирование. Сколько свежих OHE-признаков у нас появилось? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed(ms)</th>\n",
       "      <th>...</th>\n",
       "      <th>holiday_copy_1</th>\n",
       "      <th>weekday_copy_1</th>\n",
       "      <th>weekday_copy_2</th>\n",
       "      <th>weekday_copy_3</th>\n",
       "      <th>weekday_copy_4</th>\n",
       "      <th>weekday_copy_5</th>\n",
       "      <th>weekday_copy_6</th>\n",
       "      <th>workingday_copy_1</th>\n",
       "      <th>weathersit_copy_2</th>\n",
       "      <th>weathersit_copy_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.378268</td>\n",
       "      <td>51.8261</td>\n",
       "      <td>2.682552</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.091299</td>\n",
       "      <td>42.3043</td>\n",
       "      <td>2.818762</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>27.880000</td>\n",
       "      <td>51.3333</td>\n",
       "      <td>2.831351</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>29.793347</td>\n",
       "      <td>63.7917</td>\n",
       "      <td>2.440369</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>30.476653</td>\n",
       "      <td>75.7083</td>\n",
       "      <td>2.719784</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
       "5         1   0     1        0        4           1           1   8.378268   \n",
       "53        1   0     2        0        3           1           1   9.091299   \n",
       "176       3   0     6        0        0           0           1  27.880000   \n",
       "184       3   0     7        1        1           0           2  29.793347   \n",
       "205       3   0     7        0        1           1           1  30.476653   \n",
       "\n",
       "         hum  windspeed(ms)  ...  holiday_copy_1  weekday_copy_1  \\\n",
       "5    51.8261       2.682552  ...           False           False   \n",
       "53   42.3043       2.818762  ...           False           False   \n",
       "176  51.3333       2.831351  ...           False           False   \n",
       "184  63.7917       2.440369  ...            True            True   \n",
       "205  75.7083       2.719784  ...           False            True   \n",
       "\n",
       "     weekday_copy_2  weekday_copy_3  weekday_copy_4  weekday_copy_5  \\\n",
       "5             False           False            True           False   \n",
       "53            False            True           False           False   \n",
       "176           False           False           False           False   \n",
       "184           False           False           False           False   \n",
       "205           False           False           False           False   \n",
       "\n",
       "     weekday_copy_6  workingday_copy_1  weathersit_copy_2  weathersit_copy_3  \n",
       "5             False               True              False              False  \n",
       "53            False               True              False              False  \n",
       "176           False              False              False              False  \n",
       "184           False              False               True              False  \n",
       "205           False               True              False              False  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_copy = df.copy()\n",
    "\n",
    "df_copy[['season_copy','yr_copy', 'mnth_copy', 'holiday_copy', 'weekday_copy', 'workingday_copy', 'weathersit_copy'  ]] = df[['season','yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit']]\n",
    "df2 = pd.get_dummies(df_copy, columns=['season_copy','yr_copy', 'mnth_copy', 'holiday_copy', 'weekday_copy', 'workingday_copy', 'weathersit_copy'], drop_first = True) \n",
    "#тут я дропнула одно из категориальных значений, чтобы потом не возникала ситуация, что мы оцениваем регрессию по одному и тому же признаку несколько раз\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(37, 35)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как можно заметить, до этого было 11 колонок из изначального датасета, но после ОНЕ-кодирования их количество возросло до 35 штук, что означает, что мы получили 35 - 11 + 1 = 25 новых признаков, что логично, потому что из них 12 месяцев, 3 типа погодных условий, 7 типов дня, 2 типа рабочего/нерабочего дня, 2 типа праздничного/будничного дня, 2 разных года, 4 времени года, а в каждом мы опустили одно из значений для избежания мультиколлинеарности."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__к) [5 баллов]__   Некоторые из наших переменных могут вносить в спрос на велики квадратичный вклад. Например, температура. \n",
    "\n",
    "Сначала, когда температура возрастает, люди выходят кататься охотнее, а потом, когда становится жарко, спрос резко падает. Так возникает параболическая зависимость. \n",
    "\n",
    "Создайте для каждой действительной переменной из данных дополнительную переменную: её квадрат. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed(ms)</th>\n",
       "      <th>...</th>\n",
       "      <th>weekday_copy_3</th>\n",
       "      <th>weekday_copy_4</th>\n",
       "      <th>weekday_copy_5</th>\n",
       "      <th>weekday_copy_6</th>\n",
       "      <th>workingday_copy_1</th>\n",
       "      <th>weathersit_copy_2</th>\n",
       "      <th>weathersit_copy_3</th>\n",
       "      <th>temp_squared</th>\n",
       "      <th>hum_squared</th>\n",
       "      <th>windspeed(ms)_squared</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.378268</td>\n",
       "      <td>51.8261</td>\n",
       "      <td>2.682552</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>70.195375</td>\n",
       "      <td>2685.944641</td>\n",
       "      <td>7.196084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.091299</td>\n",
       "      <td>42.3043</td>\n",
       "      <td>2.818762</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>82.651718</td>\n",
       "      <td>1789.653798</td>\n",
       "      <td>7.945420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>27.880000</td>\n",
       "      <td>51.3333</td>\n",
       "      <td>2.831351</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>777.294400</td>\n",
       "      <td>2635.107689</td>\n",
       "      <td>8.016546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>29.793347</td>\n",
       "      <td>63.7917</td>\n",
       "      <td>2.440369</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>887.643525</td>\n",
       "      <td>4069.380989</td>\n",
       "      <td>5.955403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>30.476653</td>\n",
       "      <td>75.7083</td>\n",
       "      <td>2.719784</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>928.826378</td>\n",
       "      <td>5731.746689</td>\n",
       "      <td>7.397223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.700000</td>\n",
       "      <td>76.1250</td>\n",
       "      <td>2.514746</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>823.690000</td>\n",
       "      <td>5795.015625</td>\n",
       "      <td>6.323949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.923347</td>\n",
       "      <td>59.7917</td>\n",
       "      <td>2.495901</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>724.866614</td>\n",
       "      <td>3575.047389</td>\n",
       "      <td>6.229523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>24.565847</td>\n",
       "      <td>91.7083</td>\n",
       "      <td>2.905853</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>603.480839</td>\n",
       "      <td>8410.412289</td>\n",
       "      <td>8.443983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.418268</td>\n",
       "      <td>69.2174</td>\n",
       "      <td>2.663018</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>697.924884</td>\n",
       "      <td>4791.048463</td>\n",
       "      <td>7.091664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>24.395000</td>\n",
       "      <td>90.0000</td>\n",
       "      <td>2.887386</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>595.116025</td>\n",
       "      <td>8100.000000</td>\n",
       "      <td>8.336995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>24.975847</td>\n",
       "      <td>97.2500</td>\n",
       "      <td>2.347147</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>623.792933</td>\n",
       "      <td>9457.562500</td>\n",
       "      <td>5.509101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>24.873347</td>\n",
       "      <td>86.2500</td>\n",
       "      <td>2.347645</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>618.683391</td>\n",
       "      <td>7439.062500</td>\n",
       "      <td>5.511435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>15.750847</td>\n",
       "      <td>76.0833</td>\n",
       "      <td>2.496276</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>248.089181</td>\n",
       "      <td>5788.668539</td>\n",
       "      <td>6.231392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17.322500</td>\n",
       "      <td>62.9167</td>\n",
       "      <td>2.775444</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>300.069006</td>\n",
       "      <td>3958.511139</td>\n",
       "      <td>7.703091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15.477500</td>\n",
       "      <td>71.8750</td>\n",
       "      <td>2.458714</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>239.553006</td>\n",
       "      <td>5166.015625</td>\n",
       "      <td>6.045276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14.281653</td>\n",
       "      <td>73.4583</td>\n",
       "      <td>2.757099</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>203.965612</td>\n",
       "      <td>5396.121839</td>\n",
       "      <td>7.601597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.265847</td>\n",
       "      <td>61.2917</td>\n",
       "      <td>2.868789</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>150.451003</td>\n",
       "      <td>3756.672489</td>\n",
       "      <td>8.229951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.564153</td>\n",
       "      <td>77.5833</td>\n",
       "      <td>2.514621</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>183.986247</td>\n",
       "      <td>6019.168439</td>\n",
       "      <td>6.323316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11.924153</td>\n",
       "      <td>69.5833</td>\n",
       "      <td>2.477434</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>142.185425</td>\n",
       "      <td>4841.835639</td>\n",
       "      <td>6.137677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>12.983347</td>\n",
       "      <td>75.2917</td>\n",
       "      <td>2.738254</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>168.567299</td>\n",
       "      <td>5668.840089</td>\n",
       "      <td>7.498037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21.798347</td>\n",
       "      <td>82.1250</td>\n",
       "      <td>2.682345</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>475.167932</td>\n",
       "      <td>6744.515625</td>\n",
       "      <td>7.194976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>24.600000</td>\n",
       "      <td>45.6250</td>\n",
       "      <td>2.515121</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>605.160000</td>\n",
       "      <td>2081.640625</td>\n",
       "      <td>6.325832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.720847</td>\n",
       "      <td>61.1250</td>\n",
       "      <td>2.309958</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>516.236888</td>\n",
       "      <td>3736.265625</td>\n",
       "      <td>5.335904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>559</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>29.998347</td>\n",
       "      <td>48.5833</td>\n",
       "      <td>2.421524</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>899.900823</td>\n",
       "      <td>2360.337039</td>\n",
       "      <td>5.863780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>27.367500</td>\n",
       "      <td>76.2500</td>\n",
       "      <td>2.813006</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>748.980056</td>\n",
       "      <td>5814.062500</td>\n",
       "      <td>7.913001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>26.069153</td>\n",
       "      <td>71.1667</td>\n",
       "      <td>2.589249</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>679.600738</td>\n",
       "      <td>5064.699189</td>\n",
       "      <td>6.704210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>600</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.529153</td>\n",
       "      <td>63.5833</td>\n",
       "      <td>2.533714</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>813.912571</td>\n",
       "      <td>4042.836039</td>\n",
       "      <td>6.419707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>607</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.973347</td>\n",
       "      <td>59.0417</td>\n",
       "      <td>2.309709</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>839.454836</td>\n",
       "      <td>3485.922339</td>\n",
       "      <td>5.334755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>619</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>23.677500</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>2.757099</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>560.624006</td>\n",
       "      <td>2704.000000</td>\n",
       "      <td>7.601597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>621</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>25.112500</td>\n",
       "      <td>63.7083</td>\n",
       "      <td>2.477556</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>630.637656</td>\n",
       "      <td>4058.747489</td>\n",
       "      <td>6.138286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>624</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>23.780000</td>\n",
       "      <td>57.0000</td>\n",
       "      <td>2.701064</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>565.488400</td>\n",
       "      <td>3249.000000</td>\n",
       "      <td>7.295749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>639</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21.354153</td>\n",
       "      <td>64.9167</td>\n",
       "      <td>2.719661</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>455.999850</td>\n",
       "      <td>4214.177939</td>\n",
       "      <td>7.396555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>660</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.987500</td>\n",
       "      <td>56.8333</td>\n",
       "      <td>2.440492</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>399.500156</td>\n",
       "      <td>3230.023989</td>\n",
       "      <td>5.956002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.310847</td>\n",
       "      <td>64.1667</td>\n",
       "      <td>2.831725</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>497.773894</td>\n",
       "      <td>4117.365389</td>\n",
       "      <td>8.018666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>689</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>15.340847</td>\n",
       "      <td>68.5000</td>\n",
       "      <td>2.477682</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>235.341587</td>\n",
       "      <td>4692.250000</td>\n",
       "      <td>6.138909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>702</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18.552500</td>\n",
       "      <td>76.7500</td>\n",
       "      <td>2.477556</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>344.195256</td>\n",
       "      <td>5890.562500</td>\n",
       "      <td>6.138286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>723</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.483464</td>\n",
       "      <td>79.1304</td>\n",
       "      <td>2.313114</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>89.936089</td>\n",
       "      <td>6261.620204</td>\n",
       "      <td>5.350498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>37 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
       "5         1   0     1        0        4           1           1   8.378268   \n",
       "53        1   0     2        0        3           1           1   9.091299   \n",
       "176       3   0     6        0        0           0           1  27.880000   \n",
       "184       3   0     7        1        1           0           2  29.793347   \n",
       "205       3   0     7        0        1           1           1  30.476653   \n",
       "237       3   0     8        0        5           1           1  28.700000   \n",
       "242       3   0     8        0        3           1           1  26.923347   \n",
       "249       3   0     9        0        3           1           3  24.565847   \n",
       "254       3   0     9        0        1           1           1  26.418268   \n",
       "263       3   0     9        0        3           1           2  24.395000   \n",
       "265       4   0     9        0        5           1           2  24.975847   \n",
       "266       4   0     9        0        6           0           2  24.873347   \n",
       "275       4   0    10        0        1           1           2  15.750847   \n",
       "294       4   0    10        0        6           0           1  17.322500   \n",
       "305       4   0    11        0        3           1           1  15.477500   \n",
       "309       4   0    11        0        0           0           1  14.281653   \n",
       "336       4   0    12        0        6           0           1  12.265847   \n",
       "337       4   0    12        0        0           0           1  13.564153   \n",
       "342       4   0    12        0        5           1           1  11.924153   \n",
       "411       1   1     2        0        4           1           2  12.983347   \n",
       "445       2   1     3        0        3           1           2  21.798347   \n",
       "504       2   1     5        0        6           0           1  24.600000   \n",
       "522       2   1     6        0        3           1           1  22.720847   \n",
       "559       3   1     7        0        5           1           2  29.998347   \n",
       "568       3   1     7        0        0           0           2  27.367500   \n",
       "596       3   1     8        0        0           0           2  26.069153   \n",
       "600       3   1     8        0        4           1           1  28.529153   \n",
       "607       3   1     8        0        4           1           1  28.973347   \n",
       "619       3   1     9        0        2           1           1  23.677500   \n",
       "621       3   1     9        0        4           1           1  25.112500   \n",
       "624       3   1     9        0        0           0           1  23.780000   \n",
       "639       4   1    10        0        1           1           2  21.354153   \n",
       "660       4   1    10        0        1           1           1  19.987500   \n",
       "661       4   1    10        0        2           1           1  22.310847   \n",
       "689       4   1    11        0        2           1           2  15.340847   \n",
       "702       4   1    12        0        1           1           1  18.552500   \n",
       "723       1   1    12        0        1           1           2   9.483464   \n",
       "\n",
       "         hum  windspeed(ms)  ...  weekday_copy_3  weekday_copy_4  \\\n",
       "5    51.8261       2.682552  ...           False            True   \n",
       "53   42.3043       2.818762  ...            True           False   \n",
       "176  51.3333       2.831351  ...           False           False   \n",
       "184  63.7917       2.440369  ...           False           False   \n",
       "205  75.7083       2.719784  ...           False           False   \n",
       "237  76.1250       2.514746  ...           False           False   \n",
       "242  59.7917       2.495901  ...            True           False   \n",
       "249  91.7083       2.905853  ...            True           False   \n",
       "254  69.2174       2.663018  ...           False           False   \n",
       "263  90.0000       2.887386  ...            True           False   \n",
       "265  97.2500       2.347147  ...           False           False   \n",
       "266  86.2500       2.347645  ...           False           False   \n",
       "275  76.0833       2.496276  ...           False           False   \n",
       "294  62.9167       2.775444  ...           False           False   \n",
       "305  71.8750       2.458714  ...            True           False   \n",
       "309  73.4583       2.757099  ...           False           False   \n",
       "336  61.2917       2.868789  ...           False           False   \n",
       "337  77.5833       2.514621  ...           False           False   \n",
       "342  69.5833       2.477434  ...           False           False   \n",
       "411  75.2917       2.738254  ...           False            True   \n",
       "445  82.1250       2.682345  ...            True           False   \n",
       "504  45.6250       2.515121  ...           False           False   \n",
       "522  61.1250       2.309958  ...            True           False   \n",
       "559  48.5833       2.421524  ...           False           False   \n",
       "568  76.2500       2.813006  ...           False           False   \n",
       "596  71.1667       2.589249  ...           False           False   \n",
       "600  63.5833       2.533714  ...           False            True   \n",
       "607  59.0417       2.309709  ...           False            True   \n",
       "619  52.0000       2.757099  ...           False           False   \n",
       "621  63.7083       2.477556  ...           False            True   \n",
       "624  57.0000       2.701064  ...           False           False   \n",
       "639  64.9167       2.719661  ...           False           False   \n",
       "660  56.8333       2.440492  ...           False           False   \n",
       "661  64.1667       2.831725  ...           False           False   \n",
       "689  68.5000       2.477682  ...           False           False   \n",
       "702  76.7500       2.477556  ...           False           False   \n",
       "723  79.1304       2.313114  ...           False           False   \n",
       "\n",
       "     weekday_copy_5  weekday_copy_6  workingday_copy_1  weathersit_copy_2  \\\n",
       "5             False           False               True              False   \n",
       "53            False           False               True              False   \n",
       "176           False           False              False              False   \n",
       "184           False           False              False               True   \n",
       "205           False           False               True              False   \n",
       "237            True           False               True              False   \n",
       "242           False           False               True              False   \n",
       "249           False           False               True              False   \n",
       "254           False           False               True              False   \n",
       "263           False           False               True               True   \n",
       "265            True           False               True               True   \n",
       "266           False            True              False               True   \n",
       "275           False           False               True               True   \n",
       "294           False            True              False              False   \n",
       "305           False           False               True              False   \n",
       "309           False           False              False              False   \n",
       "336           False            True              False              False   \n",
       "337           False           False              False              False   \n",
       "342            True           False               True              False   \n",
       "411           False           False               True               True   \n",
       "445           False           False               True               True   \n",
       "504           False            True              False              False   \n",
       "522           False           False               True              False   \n",
       "559            True           False               True               True   \n",
       "568           False           False              False               True   \n",
       "596           False           False              False               True   \n",
       "600           False           False               True              False   \n",
       "607           False           False               True              False   \n",
       "619           False           False               True              False   \n",
       "621           False           False               True              False   \n",
       "624           False           False              False              False   \n",
       "639           False           False               True               True   \n",
       "660           False           False               True              False   \n",
       "661           False           False               True              False   \n",
       "689           False           False               True               True   \n",
       "702           False           False               True              False   \n",
       "723           False           False               True               True   \n",
       "\n",
       "     weathersit_copy_3  temp_squared  hum_squared  windspeed(ms)_squared  \n",
       "5                False     70.195375  2685.944641               7.196084  \n",
       "53               False     82.651718  1789.653798               7.945420  \n",
       "176              False    777.294400  2635.107689               8.016546  \n",
       "184              False    887.643525  4069.380989               5.955403  \n",
       "205              False    928.826378  5731.746689               7.397223  \n",
       "237              False    823.690000  5795.015625               6.323949  \n",
       "242              False    724.866614  3575.047389               6.229523  \n",
       "249               True    603.480839  8410.412289               8.443983  \n",
       "254              False    697.924884  4791.048463               7.091664  \n",
       "263              False    595.116025  8100.000000               8.336995  \n",
       "265              False    623.792933  9457.562500               5.509101  \n",
       "266              False    618.683391  7439.062500               5.511435  \n",
       "275              False    248.089181  5788.668539               6.231392  \n",
       "294              False    300.069006  3958.511139               7.703091  \n",
       "305              False    239.553006  5166.015625               6.045276  \n",
       "309              False    203.965612  5396.121839               7.601597  \n",
       "336              False    150.451003  3756.672489               8.229951  \n",
       "337              False    183.986247  6019.168439               6.323316  \n",
       "342              False    142.185425  4841.835639               6.137677  \n",
       "411              False    168.567299  5668.840089               7.498037  \n",
       "445              False    475.167932  6744.515625               7.194976  \n",
       "504              False    605.160000  2081.640625               6.325832  \n",
       "522              False    516.236888  3736.265625               5.335904  \n",
       "559              False    899.900823  2360.337039               5.863780  \n",
       "568              False    748.980056  5814.062500               7.913001  \n",
       "596              False    679.600738  5064.699189               6.704210  \n",
       "600              False    813.912571  4042.836039               6.419707  \n",
       "607              False    839.454836  3485.922339               5.334755  \n",
       "619              False    560.624006  2704.000000               7.601597  \n",
       "621              False    630.637656  4058.747489               6.138286  \n",
       "624              False    565.488400  3249.000000               7.295749  \n",
       "639              False    455.999850  4214.177939               7.396555  \n",
       "660              False    399.500156  3230.023989               5.956002  \n",
       "661              False    497.773894  4117.365389               8.018666  \n",
       "689              False    235.341587  4692.250000               6.138909  \n",
       "702              False    344.195256  5890.562500               6.138286  \n",
       "723              False     89.936089  6261.620204               5.350498  \n",
       "\n",
       "[37 rows x 38 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_real = ['temp', 'hum', 'windspeed(ms)']\n",
    "for var in var_real:\n",
    "    df2[f\"{var}_squared\"] = df2[var] ** 2\n",
    "\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__л) [5 баллов]__  Попробуйте придумать ещё какую-нибудь новую фичу (дополнительную переменную) для прогнозирования. Опишите какая за вашей фичёй стоит интуиция и почему это должно сработать при моделировании."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed(ms)</th>\n",
       "      <th>...</th>\n",
       "      <th>weekday_copy_4</th>\n",
       "      <th>weekday_copy_5</th>\n",
       "      <th>weekday_copy_6</th>\n",
       "      <th>workingday_copy_1</th>\n",
       "      <th>weathersit_copy_2</th>\n",
       "      <th>weathersit_copy_3</th>\n",
       "      <th>temp_squared</th>\n",
       "      <th>hum_squared</th>\n",
       "      <th>windspeed(ms)_squared</th>\n",
       "      <th>cumsum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.378268</td>\n",
       "      <td>51.8261</td>\n",
       "      <td>2.682552</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>70.195375</td>\n",
       "      <td>2685.944641</td>\n",
       "      <td>7.196084</td>\n",
       "      <td>1606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.091299</td>\n",
       "      <td>42.3043</td>\n",
       "      <td>2.818762</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>82.651718</td>\n",
       "      <td>1789.653798</td>\n",
       "      <td>7.945420</td>\n",
       "      <td>3523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>27.880000</td>\n",
       "      <td>51.3333</td>\n",
       "      <td>2.831351</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>777.294400</td>\n",
       "      <td>2635.107689</td>\n",
       "      <td>8.016546</td>\n",
       "      <td>8828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>29.793347</td>\n",
       "      <td>63.7917</td>\n",
       "      <td>2.440369</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>887.643525</td>\n",
       "      <td>4069.380989</td>\n",
       "      <td>5.955403</td>\n",
       "      <td>14871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>30.476653</td>\n",
       "      <td>75.7083</td>\n",
       "      <td>2.719784</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>928.826378</td>\n",
       "      <td>5731.746689</td>\n",
       "      <td>7.397223</td>\n",
       "      <td>18711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.700000</td>\n",
       "      <td>76.1250</td>\n",
       "      <td>2.514746</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>823.690000</td>\n",
       "      <td>5795.015625</td>\n",
       "      <td>6.323949</td>\n",
       "      <td>23372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.923347</td>\n",
       "      <td>59.7917</td>\n",
       "      <td>2.495901</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>724.866614</td>\n",
       "      <td>3575.047389</td>\n",
       "      <td>6.229523</td>\n",
       "      <td>28430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>24.565847</td>\n",
       "      <td>91.7083</td>\n",
       "      <td>2.905853</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>603.480839</td>\n",
       "      <td>8410.412289</td>\n",
       "      <td>8.443983</td>\n",
       "      <td>30426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.418268</td>\n",
       "      <td>69.2174</td>\n",
       "      <td>2.663018</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>697.924884</td>\n",
       "      <td>4791.048463</td>\n",
       "      <td>7.091664</td>\n",
       "      <td>35139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>24.395000</td>\n",
       "      <td>90.0000</td>\n",
       "      <td>2.887386</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>595.116025</td>\n",
       "      <td>8100.000000</td>\n",
       "      <td>8.336995</td>\n",
       "      <td>39491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>24.975847</td>\n",
       "      <td>97.2500</td>\n",
       "      <td>2.347147</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>623.792933</td>\n",
       "      <td>9457.562500</td>\n",
       "      <td>5.509101</td>\n",
       "      <td>41886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>24.873347</td>\n",
       "      <td>86.2500</td>\n",
       "      <td>2.347645</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>618.683391</td>\n",
       "      <td>7439.062500</td>\n",
       "      <td>5.511435</td>\n",
       "      <td>47309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>15.750847</td>\n",
       "      <td>76.0833</td>\n",
       "      <td>2.496276</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>248.089181</td>\n",
       "      <td>5788.668539</td>\n",
       "      <td>6.231392</td>\n",
       "      <td>50879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17.322500</td>\n",
       "      <td>62.9167</td>\n",
       "      <td>2.775444</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>300.069006</td>\n",
       "      <td>3958.511139</td>\n",
       "      <td>7.703091</td>\n",
       "      <td>55187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15.477500</td>\n",
       "      <td>71.8750</td>\n",
       "      <td>2.458714</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>239.553006</td>\n",
       "      <td>5166.015625</td>\n",
       "      <td>6.045276</td>\n",
       "      <td>59373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14.281653</td>\n",
       "      <td>73.4583</td>\n",
       "      <td>2.757099</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>203.965612</td>\n",
       "      <td>5396.121839</td>\n",
       "      <td>7.601597</td>\n",
       "      <td>63022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.265847</td>\n",
       "      <td>61.2917</td>\n",
       "      <td>2.868789</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>150.451003</td>\n",
       "      <td>3756.672489</td>\n",
       "      <td>8.229951</td>\n",
       "      <td>66636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.564153</td>\n",
       "      <td>77.5833</td>\n",
       "      <td>2.514621</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>183.986247</td>\n",
       "      <td>6019.168439</td>\n",
       "      <td>6.323316</td>\n",
       "      <td>70121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11.924153</td>\n",
       "      <td>69.5833</td>\n",
       "      <td>2.477434</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>142.185425</td>\n",
       "      <td>4841.835639</td>\n",
       "      <td>6.137677</td>\n",
       "      <td>73741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>12.983347</td>\n",
       "      <td>75.2917</td>\n",
       "      <td>2.738254</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>168.567299</td>\n",
       "      <td>5668.840089</td>\n",
       "      <td>7.498037</td>\n",
       "      <td>76746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21.798347</td>\n",
       "      <td>82.1250</td>\n",
       "      <td>2.682345</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>475.167932</td>\n",
       "      <td>6744.515625</td>\n",
       "      <td>7.194976</td>\n",
       "      <td>82976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>24.600000</td>\n",
       "      <td>45.6250</td>\n",
       "      <td>2.515121</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>605.160000</td>\n",
       "      <td>2081.640625</td>\n",
       "      <td>6.325832</td>\n",
       "      <td>91270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.720847</td>\n",
       "      <td>61.1250</td>\n",
       "      <td>2.309958</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>516.236888</td>\n",
       "      <td>3736.265625</td>\n",
       "      <td>5.335904</td>\n",
       "      <td>98325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>559</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>29.998347</td>\n",
       "      <td>48.5833</td>\n",
       "      <td>2.421524</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>899.900823</td>\n",
       "      <td>2360.337039</td>\n",
       "      <td>5.863780</td>\n",
       "      <td>105824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>27.367500</td>\n",
       "      <td>76.2500</td>\n",
       "      <td>2.813006</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>748.980056</td>\n",
       "      <td>5814.062500</td>\n",
       "      <td>7.913001</td>\n",
       "      <td>113234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>26.069153</td>\n",
       "      <td>71.1667</td>\n",
       "      <td>2.589249</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>679.600738</td>\n",
       "      <td>5064.699189</td>\n",
       "      <td>6.704210</td>\n",
       "      <td>117783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>600</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.529153</td>\n",
       "      <td>63.5833</td>\n",
       "      <td>2.533714</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>813.912571</td>\n",
       "      <td>4042.836039</td>\n",
       "      <td>6.419707</td>\n",
       "      <td>125548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>607</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.973347</td>\n",
       "      <td>59.0417</td>\n",
       "      <td>2.309709</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>839.454836</td>\n",
       "      <td>3485.922339</td>\n",
       "      <td>5.334755</td>\n",
       "      <td>133261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>619</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>23.677500</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>2.757099</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>560.624006</td>\n",
       "      <td>2704.000000</td>\n",
       "      <td>7.601597</td>\n",
       "      <td>141028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>621</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>25.112500</td>\n",
       "      <td>63.7083</td>\n",
       "      <td>2.477556</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>630.637656</td>\n",
       "      <td>4058.747489</td>\n",
       "      <td>6.138286</td>\n",
       "      <td>148832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>624</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>23.780000</td>\n",
       "      <td>57.0000</td>\n",
       "      <td>2.701064</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>565.488400</td>\n",
       "      <td>3249.000000</td>\n",
       "      <td>7.295749</td>\n",
       "      <td>156165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>639</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21.354153</td>\n",
       "      <td>64.9167</td>\n",
       "      <td>2.719661</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>455.999850</td>\n",
       "      <td>4214.177939</td>\n",
       "      <td>7.396555</td>\n",
       "      <td>162943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>660</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.987500</td>\n",
       "      <td>56.8333</td>\n",
       "      <td>2.440492</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>399.500156</td>\n",
       "      <td>3230.023989</td>\n",
       "      <td>5.956002</td>\n",
       "      <td>170001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.310847</td>\n",
       "      <td>64.1667</td>\n",
       "      <td>2.831725</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>497.773894</td>\n",
       "      <td>4117.365389</td>\n",
       "      <td>8.018666</td>\n",
       "      <td>177467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>689</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>15.340847</td>\n",
       "      <td>68.5000</td>\n",
       "      <td>2.477682</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>235.341587</td>\n",
       "      <td>4692.250000</td>\n",
       "      <td>6.138909</td>\n",
       "      <td>183101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>702</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18.552500</td>\n",
       "      <td>76.7500</td>\n",
       "      <td>2.477556</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>344.195256</td>\n",
       "      <td>5890.562500</td>\n",
       "      <td>6.138286</td>\n",
       "      <td>189335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>723</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.483464</td>\n",
       "      <td>79.1304</td>\n",
       "      <td>2.313114</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>89.936089</td>\n",
       "      <td>6261.620204</td>\n",
       "      <td>5.350498</td>\n",
       "      <td>190255</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>37 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     season  yr  mnth  holiday  weekday  workingday  weathersit       temp  \\\n",
       "5         1   0     1        0        4           1           1   8.378268   \n",
       "53        1   0     2        0        3           1           1   9.091299   \n",
       "176       3   0     6        0        0           0           1  27.880000   \n",
       "184       3   0     7        1        1           0           2  29.793347   \n",
       "205       3   0     7        0        1           1           1  30.476653   \n",
       "237       3   0     8        0        5           1           1  28.700000   \n",
       "242       3   0     8        0        3           1           1  26.923347   \n",
       "249       3   0     9        0        3           1           3  24.565847   \n",
       "254       3   0     9        0        1           1           1  26.418268   \n",
       "263       3   0     9        0        3           1           2  24.395000   \n",
       "265       4   0     9        0        5           1           2  24.975847   \n",
       "266       4   0     9        0        6           0           2  24.873347   \n",
       "275       4   0    10        0        1           1           2  15.750847   \n",
       "294       4   0    10        0        6           0           1  17.322500   \n",
       "305       4   0    11        0        3           1           1  15.477500   \n",
       "309       4   0    11        0        0           0           1  14.281653   \n",
       "336       4   0    12        0        6           0           1  12.265847   \n",
       "337       4   0    12        0        0           0           1  13.564153   \n",
       "342       4   0    12        0        5           1           1  11.924153   \n",
       "411       1   1     2        0        4           1           2  12.983347   \n",
       "445       2   1     3        0        3           1           2  21.798347   \n",
       "504       2   1     5        0        6           0           1  24.600000   \n",
       "522       2   1     6        0        3           1           1  22.720847   \n",
       "559       3   1     7        0        5           1           2  29.998347   \n",
       "568       3   1     7        0        0           0           2  27.367500   \n",
       "596       3   1     8        0        0           0           2  26.069153   \n",
       "600       3   1     8        0        4           1           1  28.529153   \n",
       "607       3   1     8        0        4           1           1  28.973347   \n",
       "619       3   1     9        0        2           1           1  23.677500   \n",
       "621       3   1     9        0        4           1           1  25.112500   \n",
       "624       3   1     9        0        0           0           1  23.780000   \n",
       "639       4   1    10        0        1           1           2  21.354153   \n",
       "660       4   1    10        0        1           1           1  19.987500   \n",
       "661       4   1    10        0        2           1           1  22.310847   \n",
       "689       4   1    11        0        2           1           2  15.340847   \n",
       "702       4   1    12        0        1           1           1  18.552500   \n",
       "723       1   1    12        0        1           1           2   9.483464   \n",
       "\n",
       "         hum  windspeed(ms)  ...  weekday_copy_4  weekday_copy_5  \\\n",
       "5    51.8261       2.682552  ...            True           False   \n",
       "53   42.3043       2.818762  ...           False           False   \n",
       "176  51.3333       2.831351  ...           False           False   \n",
       "184  63.7917       2.440369  ...           False           False   \n",
       "205  75.7083       2.719784  ...           False           False   \n",
       "237  76.1250       2.514746  ...           False            True   \n",
       "242  59.7917       2.495901  ...           False           False   \n",
       "249  91.7083       2.905853  ...           False           False   \n",
       "254  69.2174       2.663018  ...           False           False   \n",
       "263  90.0000       2.887386  ...           False           False   \n",
       "265  97.2500       2.347147  ...           False            True   \n",
       "266  86.2500       2.347645  ...           False           False   \n",
       "275  76.0833       2.496276  ...           False           False   \n",
       "294  62.9167       2.775444  ...           False           False   \n",
       "305  71.8750       2.458714  ...           False           False   \n",
       "309  73.4583       2.757099  ...           False           False   \n",
       "336  61.2917       2.868789  ...           False           False   \n",
       "337  77.5833       2.514621  ...           False           False   \n",
       "342  69.5833       2.477434  ...           False            True   \n",
       "411  75.2917       2.738254  ...            True           False   \n",
       "445  82.1250       2.682345  ...           False           False   \n",
       "504  45.6250       2.515121  ...           False           False   \n",
       "522  61.1250       2.309958  ...           False           False   \n",
       "559  48.5833       2.421524  ...           False            True   \n",
       "568  76.2500       2.813006  ...           False           False   \n",
       "596  71.1667       2.589249  ...           False           False   \n",
       "600  63.5833       2.533714  ...            True           False   \n",
       "607  59.0417       2.309709  ...            True           False   \n",
       "619  52.0000       2.757099  ...           False           False   \n",
       "621  63.7083       2.477556  ...            True           False   \n",
       "624  57.0000       2.701064  ...           False           False   \n",
       "639  64.9167       2.719661  ...           False           False   \n",
       "660  56.8333       2.440492  ...           False           False   \n",
       "661  64.1667       2.831725  ...           False           False   \n",
       "689  68.5000       2.477682  ...           False           False   \n",
       "702  76.7500       2.477556  ...           False           False   \n",
       "723  79.1304       2.313114  ...           False           False   \n",
       "\n",
       "     weekday_copy_6  workingday_copy_1  weathersit_copy_2  weathersit_copy_3  \\\n",
       "5             False               True              False              False   \n",
       "53            False               True              False              False   \n",
       "176           False              False              False              False   \n",
       "184           False              False               True              False   \n",
       "205           False               True              False              False   \n",
       "237           False               True              False              False   \n",
       "242           False               True              False              False   \n",
       "249           False               True              False               True   \n",
       "254           False               True              False              False   \n",
       "263           False               True               True              False   \n",
       "265           False               True               True              False   \n",
       "266            True              False               True              False   \n",
       "275           False               True               True              False   \n",
       "294            True              False              False              False   \n",
       "305           False               True              False              False   \n",
       "309           False              False              False              False   \n",
       "336            True              False              False              False   \n",
       "337           False              False              False              False   \n",
       "342           False               True              False              False   \n",
       "411           False               True               True              False   \n",
       "445           False               True               True              False   \n",
       "504            True              False              False              False   \n",
       "522           False               True              False              False   \n",
       "559           False               True               True              False   \n",
       "568           False              False               True              False   \n",
       "596           False              False               True              False   \n",
       "600           False               True              False              False   \n",
       "607           False               True              False              False   \n",
       "619           False               True              False              False   \n",
       "621           False               True              False              False   \n",
       "624           False              False              False              False   \n",
       "639           False               True               True              False   \n",
       "660           False               True              False              False   \n",
       "661           False               True              False              False   \n",
       "689           False               True               True              False   \n",
       "702           False               True              False              False   \n",
       "723           False               True               True              False   \n",
       "\n",
       "     temp_squared  hum_squared  windspeed(ms)_squared  cumsum  \n",
       "5       70.195375  2685.944641               7.196084    1606  \n",
       "53      82.651718  1789.653798               7.945420    3523  \n",
       "176    777.294400  2635.107689               8.016546    8828  \n",
       "184    887.643525  4069.380989               5.955403   14871  \n",
       "205    928.826378  5731.746689               7.397223   18711  \n",
       "237    823.690000  5795.015625               6.323949   23372  \n",
       "242    724.866614  3575.047389               6.229523   28430  \n",
       "249    603.480839  8410.412289               8.443983   30426  \n",
       "254    697.924884  4791.048463               7.091664   35139  \n",
       "263    595.116025  8100.000000               8.336995   39491  \n",
       "265    623.792933  9457.562500               5.509101   41886  \n",
       "266    618.683391  7439.062500               5.511435   47309  \n",
       "275    248.089181  5788.668539               6.231392   50879  \n",
       "294    300.069006  3958.511139               7.703091   55187  \n",
       "305    239.553006  5166.015625               6.045276   59373  \n",
       "309    203.965612  5396.121839               7.601597   63022  \n",
       "336    150.451003  3756.672489               8.229951   66636  \n",
       "337    183.986247  6019.168439               6.323316   70121  \n",
       "342    142.185425  4841.835639               6.137677   73741  \n",
       "411    168.567299  5668.840089               7.498037   76746  \n",
       "445    475.167932  6744.515625               7.194976   82976  \n",
       "504    605.160000  2081.640625               6.325832   91270  \n",
       "522    516.236888  3736.265625               5.335904   98325  \n",
       "559    899.900823  2360.337039               5.863780  105824  \n",
       "568    748.980056  5814.062500               7.913001  113234  \n",
       "596    679.600738  5064.699189               6.704210  117783  \n",
       "600    813.912571  4042.836039               6.419707  125548  \n",
       "607    839.454836  3485.922339               5.334755  133261  \n",
       "619    560.624006  2704.000000               7.601597  141028  \n",
       "621    630.637656  4058.747489               6.138286  148832  \n",
       "624    565.488400  3249.000000               7.295749  156165  \n",
       "639    455.999850  4214.177939               7.396555  162943  \n",
       "660    399.500156  3230.023989               5.956002  170001  \n",
       "661    497.773894  4117.365389               8.018666  177467  \n",
       "689    235.341587  4692.250000               6.138909  183101  \n",
       "702    344.195256  5890.562500               6.138286  189335  \n",
       "723     89.936089  6261.620204               5.350498  190255  \n",
       "\n",
       "[37 rows x 39 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2['cumsum'] = df2['cnt'].cumsum()\n",
    "\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Я добавила столбец кумулятивной суммы арендованных велосипедов, чтобы посмотреть, какой эффект будет в долгосрочном периоде при оценке спроса на велосипеды. Благодаря этому столбцу мы сможем посмотреть, какая есть зависимость между количеством всех арендованных велосипедов и спросом в данный момент. Это имеет смысл, потому что таким образом мы сможем понять, есть ли какая-то устойчивая тенденция (например, мода на велосипеды) или же все значения находятся в примерно одном и том же диапазоне вне зависимости от поведения других людей и их спроса на товар. Так, мы сможем посмотреть, насколько тут применим эффект присоединения к большинству. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Обучение модели"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__а) [10 баллов]__  Разбейте выборку на тренировочную и тестовую."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = df2.drop(['cnt', 'season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit'], axis=1) #удалим для избежания мультиколлинеарности\n",
    "Y = df2['cnt']\n",
    "\n",
    "(X_train, X_test, y_train, y_test) = train_test_split(X, Y, test_size = .2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['temp', 'hum', 'windspeed(ms)', 'season_copy_2', 'season_copy_3',\n",
       "       'season_copy_4', 'yr_copy_1', 'mnth_copy_2', 'mnth_copy_3',\n",
       "       'mnth_copy_5', 'mnth_copy_6', 'mnth_copy_7', 'mnth_copy_8',\n",
       "       'mnth_copy_9', 'mnth_copy_10', 'mnth_copy_11', 'mnth_copy_12',\n",
       "       'holiday_copy_1', 'weekday_copy_1', 'weekday_copy_2', 'weekday_copy_3',\n",
       "       'weekday_copy_4', 'weekday_copy_5', 'weekday_copy_6',\n",
       "       'workingday_copy_1', 'weathersit_copy_2', 'weathersit_copy_3',\n",
       "       'temp_squared', 'hum_squared', 'windspeed(ms)_squared', 'cumsum'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__б) [10 баллов]__ Возьмите RMSE в качестве метрики качества. Для этого нужно написать свою функцию. Постройте наивный прогноз (среднее) и найдите для него RMSE. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rmse(y_true, y_pred):\n",
    "    return np.sqrt(np.mean((y_true - y_pred)**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2019.3948689500955"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_naive = rmse(y_test, y_train.mean()) \n",
    "rmse_naive"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__в) [5 баллов]__ Запустите код с разбиением выборки на тренировочную и тестовую, подсчётом наивного прогноза и RMSE по нему несколько раз. НЕ НАДО НИЧЕГО КОПИРОВАТЬ. ПРОСТО ПЕРЕЗАПУСТИТЕ КОД ТРИ РАЗА. Меняется ли RMSE? Почему оно меняется? К чему плохому это может привести при обучении? Как это обычно исправляют? \n",
    "\n",
    "__Ответ:__  а) Да, РМСЕ меняется, потому что \n",
    "1. Данных мало -> при изменении тренировочной выборки меняются оценки коэффициентов и меняются метрики качества\n",
    "2. Зависимости могут быть и не линейные -> оценки неустойчивые и меняются с изменением выборки\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Это может привести к неустойчивости оценок, сложности интерпретации полученных результатов и сложности воспроизведения полученных результатов сторонним исследователем."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__г) [10 баллов]__ Оцените линейную регрессию. Насколько удалось улучшить качество прогнозирования в сравнении с наивным прогнозом?  Визуализируйте прогнозы функцией `plot_yreal_ypred`.\n",
    "\n",
    "Что вы видите на этой визуализации? Проинтерпретируйте картинку.\n",
    "\n",
    "__Ответ:__ Мы видим, что регрессия хорошо подобрана под тренирочные данные, но очень плохо описывает тестовый набор. Возможно, это произошло из-за переобучения модели (например, RMSE у регрессионной модели БОЛЬШЕ, чем у наивного прогноза, что говорит о низком качестве прогноза при помощи линейной регрессии.) Для тестового набора данных модель вообще не подходит - там не прослеживается линейной связи вовсе. Поэтому нужно менять подход и либо уходить от поиска линейной связи в данных, либо менять подбор коэффициентов в модели линейной регрессии. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "(X_train, X_test, y_train, y_test) = train_test_split(X, Y, test_size = .2, random_state = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "\n",
    "y_train = np.array(y_train).reshape(-1, 1)\n",
    "\n",
    "\n",
    "lin_model = LinearRegression()\n",
    "lin_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_test = lin_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_train = lin_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4434.292071125323"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse(y_pred_test.flatten(), y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_yreal_ypred(y_test, y_train, y_pred_test, y_pred_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__д) [10 баллов]__ Какими получились значения перед коэффициентами у вашей модели?  Как думаете, почему такое произошло? \n",
    "\n",
    "__Ответ:__  Значения получились ОЧЕНЬ маленькими. Это можно связать с тем, что мы переобучили (объективно) модель, и взяли просто огромное количество коэффициентов, которые дублируют друг друга и не несут дополнительного смысла (взять хотя бы те десятки созданных коэффициентов в дамми-столбцах и изначальные столбцы датасета). Во-вторых, вероятно, что по отдельности каждый признак действительно несильно влияет на таргет, но в совокупности есть какое-то значимое влияние. В-третьих, очень сомнительно, что большое количество переменных будет давать большой прирост таргета по отдельности (это можно посмотреть по максимальному значению таргета - оно не больше 9000, что не дает возможности каждому предиктору весить много в модели). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-27381.83779926])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lin_model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-4.78920771e+02,  5.35359475e+02,  9.02287619e+03,\n",
       "        -5.58927777e+03, -3.77497694e+03, -1.26906729e+03,\n",
       "         9.30873112e+02, -1.45546669e+03, -1.39377392e+03,\n",
       "        -1.38586075e+03, -2.80964310e+03, -1.26604254e+04,\n",
       "        -1.07979679e+04, -5.82180317e+03, -2.43352701e+03,\n",
       "        -1.71330120e+03,  6.92958669e+01, -4.82032192e-11,\n",
       "        -3.16224041e+03,  9.38566918e+02,  1.82362020e+03,\n",
       "        -6.63719899e+02,  4.34534730e+02, -6.18931235e+02,\n",
       "        -6.29238455e+02, -4.96502882e+02,  0.00000000e+00,\n",
       "         3.68808160e+01, -4.24169428e+00, -1.23339803e+03,\n",
       "         1.43995197e-02]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lin_model.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Бонус"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__a) [2 балла]__ Обучите Lasso-регрессию. В качестве силы регуляризации возьмите $\\alpha = 40$. \n",
    "\n",
    "* Каким получилось качество прогноза? \n",
    "* Что в модели произошло с коэффициентами?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso_model = Lasso(alpha=40)\n",
    "lasso_model.fit(X_train, y_train)\n",
    "y_pred_test_l = lasso_model.predict(X_test)\n",
    "y_pred_train_l = lasso_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "933.7880200904071"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse(y_pred_test_l, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8.66236559e+02, -0.00000000e+00, -0.00000000e+00,  4.91362245e+02,\n",
       "       -0.00000000e+00,  1.56877300e+02,  0.00000000e+00, -0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -0.00000000e+00,  0.00000000e+00,\n",
       "       -1.89366531e+02,  0.00000000e+00, -0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -3.33501010e+02, -0.00000000e+00,\n",
       "        0.00000000e+00,  4.07370491e+02,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -1.69468739e+01,\n",
       "       -5.03016421e-01, -0.00000000e+00,  1.19473959e-02])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_model.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Ответ:__   Качество прогноза резко возросло и стало сильно лучше, чем у линейной модели, что может быть объяснено тем, что эта модель сильно лучше адаптирована под данные с мультиколлинеарностью в коэффициентах. Коэффициенты все еще очень маленькие, но уже чуть более приличного вида, что, в целом, говорит о том, что Лассо-регрессия КРАТНО лучше подходит под эти данные. Так, многие коэффициенты просто обратились в ноль, что сделало предсказание более эффективным за счет адаптации к мультиколлинеарности в данных. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__в) [2 балла]__ Подберите для Lasso-регрессии с помощью поиска по решётке оптимальное значение $\\alpha$.  Каким оказалось это значение? \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/base.py:1151: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n",
      "  return fit_method(estimator, *args, **kwargs)\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/base.py:1151: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n",
      "  return fit_method(estimator, *args, **kwargs)\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/base.py:1151: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n",
      "  return fit_method(estimator, *args, **kwargs)\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/base.py:1151: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n",
      "  return fit_method(estimator, *args, **kwargs)\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/base.py:1151: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n",
      "  return fit_method(estimator, *args, **kwargs)\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.216e+05, tolerance: 1.010e+04 Linear regression models with null weight for the l1 regularization term are more efficiently fitted using one of the solvers implemented in sklearn.linear_model.Ridge/RidgeCV instead.\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.330e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.174e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.057e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.520e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.176e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.562e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.138e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.588e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.761e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.899e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.094e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.061e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.237e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.538e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.471e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.699e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.908e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.618e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.825e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.183e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.286e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.098e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.013e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.285e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.913e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.852e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.692e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.390e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.047e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.624e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.390e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.330e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.752e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.841e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.312e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.914e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.841e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.116e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.202e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.981e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.415e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.305e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.460e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.597e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.629e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.028e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.423e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.777e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.218e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.252e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.435e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.774e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.085e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.725e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.851e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.913e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.090e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.367e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.602e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.043e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.311e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.412e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.646e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.151e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.099e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.737e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.610e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.911e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.405e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.152e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.054e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.008e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.101e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.689e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.200e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.471e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.116e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.100e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.994e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.247e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.816e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.228e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.115e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.301e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.293e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.149e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.653e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.136e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.937e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.338e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.470e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.321e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.170e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.295e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.381e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.793e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.455e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.188e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.272e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.423e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.011e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.779e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.191e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.324e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.464e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.043e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.043e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.184e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.808e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.504e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.074e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.267e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.136e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.271e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.546e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.103e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.476e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.204e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.720e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.586e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.134e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.678e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.251e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.134e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.626e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.166e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.877e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.309e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.536e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.665e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.197e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.074e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.407e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.926e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.722e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.227e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.315e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.503e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.308e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.772e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.257e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.316e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.597e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.681e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.228e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.286e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.314e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.688e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.001e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.528e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.304e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.311e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.778e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.366e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.557e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.339e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.305e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.866e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.328e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.621e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.373e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.298e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.951e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.331e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.627e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.404e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.289e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.035e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.355e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.549e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.435e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.280e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.118e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.389e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.565e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.463e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.271e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.198e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.428e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.580e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.492e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.260e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.276e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.469e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.595e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.519e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.250e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.353e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.510e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.610e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.546e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.240e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.420e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.550e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.623e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.572e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.229e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.489e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.590e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.636e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.597e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.218e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.558e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.629e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.648e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.621e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.208e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.625e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.667e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.660e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.645e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.197e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.674e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.704e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.671e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.761e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.187e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.713e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.740e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.681e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.692e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.177e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.756e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.775e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.689e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.631e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.167e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.801e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.810e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.755e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.570e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.157e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.848e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.843e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.794e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.464e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.148e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.894e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.876e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.785e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.388e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.139e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.941e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.908e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.779e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.298e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.131e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.986e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.940e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.852e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.192e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.122e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.031e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.970e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.850e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.068e+06, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.114e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.074e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.000e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.744e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.211e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.106e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.116e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.030e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.658e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.406e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.098e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.157e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.058e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.572e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.219e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.091e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.969e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.086e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.489e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.051e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.083e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.652e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.114e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.408e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.890e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.076e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.358e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.140e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.329e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.734e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.068e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.088e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.167e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.254e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.582e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.061e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.923e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.192e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.145e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.344e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.053e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.666e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.217e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.825e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.169e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.046e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.395e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.242e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.135e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.998e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.040e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.139e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.266e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.228e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.832e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.033e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.899e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.289e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.184e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.671e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.029e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.673e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.312e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.151e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.515e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.025e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.451e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.334e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.125e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.362e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.021e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.169e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.356e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.104e+06, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.213e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.017e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.864e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.388e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.670e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.069e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.013e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.670e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.453e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.108e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.928e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.009e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.361e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.528e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.643e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.790e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.006e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.996e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.532e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.247e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.656e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.002e+06, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.607e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.536e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.904e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.525e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.990e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.177e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.539e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.597e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.397e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.958e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.681e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.542e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.315e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.272e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.925e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.321e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.545e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.887e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.150e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.894e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.301e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.548e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.807e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.030e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.863e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.283e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.551e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.733e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.914e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.833e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.268e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.554e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.661e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.800e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.803e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.254e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.556e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.592e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.688e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.773e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.144e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.559e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.526e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.578e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.744e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.032e+05, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.561e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.462e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.471e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.714e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.570e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.564e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.400e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.366e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.684e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.011e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.566e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.340e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.263e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.653e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.576e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.568e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.281e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.162e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.622e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.223e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.200e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.224e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.063e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.592e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.930e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.081e+06, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.167e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.965e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.561e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.681e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.535e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.112e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.870e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.529e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.468e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.517e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.057e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.776e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.497e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.283e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.688e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.003e+05, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.684e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.463e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.120e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.001e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.491e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.593e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.428e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.977e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.424e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.953e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.505e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.391e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.853e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.933e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.414e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.417e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.353e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.744e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.509e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.869e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.331e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.315e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.646e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.141e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.316e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.247e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.274e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.558e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.817e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.748e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.164e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.233e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.477e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.531e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.158e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.083e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.190e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.404e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.276e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.554e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.003e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.146e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.338e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.047e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.150e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.924e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.101e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.276e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.840e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.842e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.847e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.054e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.221e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.653e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.567e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.770e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.005e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.169e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.482e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.307e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.694e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.955e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.124e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.326e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.052e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.619e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.904e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.082e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.182e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.797e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.545e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.851e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.040e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.050e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.537e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.473e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.797e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.998e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.927e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.268e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.374e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.742e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.958e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.812e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.985e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.280e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.685e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.918e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.705e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.678e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.190e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.626e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.879e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.606e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.372e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.103e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.566e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.840e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.513e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.326e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.020e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.505e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.801e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.425e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.280e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.940e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.441e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.763e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.343e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.236e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.863e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.376e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.726e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.265e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.193e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.788e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.309e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.688e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.539e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.149e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.714e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.241e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.651e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.362e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.105e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.643e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.170e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.614e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.217e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.062e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.573e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.166e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.578e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.014e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.019e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.505e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.118e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.542e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.883e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.977e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.438e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.069e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.506e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.784e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.936e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.373e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.019e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.472e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.698e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.894e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.309e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.969e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.436e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.617e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.854e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.246e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.918e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.402e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.537e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.783e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.185e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.868e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.368e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.728e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.738e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.125e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.816e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.335e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.752e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.701e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.066e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.764e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.078e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.774e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.665e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.007e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.712e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.804e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.785e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.630e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.497e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.658e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.608e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.789e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.595e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.932e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.603e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.455e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.788e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.561e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.373e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.548e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.327e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.783e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.527e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.820e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.491e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.218e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.774e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.494e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.265e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.434e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.122e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.763e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.460e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.706e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.375e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.036e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.751e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.427e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.132e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.314e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.957e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.737e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.395e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.525e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.253e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.886e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.722e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.363e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.844e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.190e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.819e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.707e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.331e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.228e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.126e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.756e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.691e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.300e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.185e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.061e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.698e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.674e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.269e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.391e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.994e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.642e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.671e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.239e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.376e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.927e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.589e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.108e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.208e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.362e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.858e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.539e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.495e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.178e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.348e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.787e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.491e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.842e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.148e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.334e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.715e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.444e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.155e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.119e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.320e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.640e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.400e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.815e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.090e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.307e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.565e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.357e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.477e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.061e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.294e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.487e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.315e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.257e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.033e+04, tolerance: 1.010e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.281e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.407e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.275e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.101e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.268e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.326e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.236e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.984e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.256e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.241e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.198e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.892e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.244e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.154e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.161e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.818e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.232e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.064e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.125e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.755e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.220e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.971e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.090e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.701e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.208e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.876e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.056e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.654e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.197e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.777e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.022e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.612e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.185e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.675e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.989e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.573e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.174e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.569e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.957e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.538e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.163e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.617e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.476e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.152e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.365e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.884e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.472e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.141e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.141e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.187e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.442e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.130e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.934e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.428e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.412e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.119e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.736e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.625e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.383e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.109e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.539e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.790e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.355e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.098e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.338e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.929e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.327e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.087e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.127e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.049e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.299e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.077e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.897e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.151e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.271e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.066e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.639e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.240e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.244e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.056e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.330e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.316e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.216e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.045e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.919e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.382e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.188e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.035e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.908e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.438e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.160e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.024e+05, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.492e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.487e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.131e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.992e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.271e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.527e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.103e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.234e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.130e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.562e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.073e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.874e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.029e+05, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.591e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.044e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.725e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.519e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.614e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.014e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.644e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.910e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.631e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.984e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.589e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.411e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.645e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.953e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.548e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.992e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.654e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.921e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.514e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.632e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.659e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.889e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.484e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.319e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.659e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.856e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.455e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.043e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.668e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.822e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.428e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.798e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.648e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.787e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.400e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.576e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.631e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.751e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.374e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.376e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.616e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.714e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.347e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.193e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.599e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.676e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.320e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.026e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.581e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.636e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.293e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.871e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.560e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.594e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.266e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.491e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.537e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.550e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.239e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.483e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.513e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.502e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.211e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.425e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.487e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.445e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.183e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.361e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.459e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.380e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.155e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.300e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.430e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.304e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.127e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.244e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.399e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.219e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.099e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.191e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.367e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.117e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.071e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.142e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.333e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.983e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.043e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.097e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.299e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.953e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.014e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.054e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.262e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.886e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.986e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.016e+04, tolerance: 9.888e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.225e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.811e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.957e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.186e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.726e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.928e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.146e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.628e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.900e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.105e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.514e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.871e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.062e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.377e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.842e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.019e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.204e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.813e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.974e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.559e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.785e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.927e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.559e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.756e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.880e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.267e+05, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.727e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.832e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.085e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.698e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.773e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.226e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.669e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.695e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.071e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.640e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.633e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.277e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.611e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.572e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.692e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.581e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.512e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.243e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.552e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.454e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.884e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.523e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.394e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.591e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.493e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.333e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.345e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.464e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.272e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.195e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.008e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.211e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.340e+04, tolerance: 1.004e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.991e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.148e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.578e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.085e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.322e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.021e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.144e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.956e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.011e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.891e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.907e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.825e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.823e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.758e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.752e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.690e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.692e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.622e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.640e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.552e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.594e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.482e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.553e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.411e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.516e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.339e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.482e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.266e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.452e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.141e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.424e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.011e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.398e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.909e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.373e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.809e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.351e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.708e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.330e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.611e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.310e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.513e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.291e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.413e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.273e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.308e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.256e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.198e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.240e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.080e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.225e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.951e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.210e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.805e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.196e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.633e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.182e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.545e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.169e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.566e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.157e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.560e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.145e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.553e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.133e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.545e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.122e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.538e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.111e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.531e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.100e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.524e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.090e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.517e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.080e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.510e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.070e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.503e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.061e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.496e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.051e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.489e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.042e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.482e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.033e+04, tolerance: 1.026e+04\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.476e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.469e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.462e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.455e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.448e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.441e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.434e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.427e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.420e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.413e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.382e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.352e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.326e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.371e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.382e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.367e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.352e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.338e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.325e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.312e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.301e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.290e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.281e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.271e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.262e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.254e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.246e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.238e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.230e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.223e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.216e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.210e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.203e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.197e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.191e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.185e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.179e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.173e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.168e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.162e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.157e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.152e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.147e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.142e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.137e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.132e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.127e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.123e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.118e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.113e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.109e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.104e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.100e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.096e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.091e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.087e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.083e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.079e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.074e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.070e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.066e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.062e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.058e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.054e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.050e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.046e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.042e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.038e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.034e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.031e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.027e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.023e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.019e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.015e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.012e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.008e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.004e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.000e+04, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.965e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.928e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.891e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.854e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.817e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.780e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.743e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.707e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.670e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.633e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.597e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.560e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.524e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.487e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.451e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.415e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.378e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.342e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.306e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.270e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.234e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.198e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.161e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.125e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.089e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.054e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.017e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.981e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.945e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "/Users/vischudro/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.700e+03, tolerance: 8.417e+03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "99.80000000000001"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = np.arange(0, 100, 0.2)\n",
    "\n",
    "grid_cv_lasso = GridSearchCV(Lasso(), [{'alpha':param_grid}], scoring = 'neg_mean_squared_error', cv=5)\n",
    "grid_cv_lasso.fit(X_train, y_train)\n",
    "best_alpha = grid_cv_lasso.best_params_['alpha'] \n",
    "best_alpha\n",
    "\n",
    "#код отчасти брала из документации "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__г) [2 балла]__ Каким получается качество прогноза для модели с оптимальным значением $\\alpha$? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_lasso = Lasso(alpha = best_alpha)\n",
    "best_lasso.fit(X_train, y_train)\n",
    "y_pred_test_best_lasso = best_lasso.predict(X_test)\n",
    "y_pred_train_best_lasso = best_lasso.predict(X_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "907.9020697998591"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_best_lasso = rmse(y_pred_test_best_lasso, y_test)\n",
    "rmse_best_lasso "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RMSE снизилась за счет подбора оптимальных параметров. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__д) [2 балла]__ Наконец, как принято в анализе данных, давайте проинтерпретируем результат. Проинтерпретируйте последнюю обученую модель. У каких признаков наибольшие положительные коэфициенты? У каких наибольшие отрицательные? Логично ли утверждать, что чем больще/меньше эти признаки, тем выше/ниже спрос на велосипеды? Какие коэффициенты занулились? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Признаки с положительными коэффициентами:\n",
      "temp: 864.370\n",
      "cumsum: 0.012\n",
      "\n",
      "Признаки с отрицательными коэффициентами:\n",
      "temp_squared: -17.076\n",
      "hum_squared: -0.520\n",
      "\n",
      "Признаки с нулевыми коэффициентами:\n",
      "hum\n",
      "windspeed(ms)\n",
      "season_copy_2\n",
      "season_copy_3\n",
      "season_copy_4\n",
      "yr_copy_1\n",
      "mnth_copy_2\n",
      "mnth_copy_3\n",
      "mnth_copy_5\n",
      "mnth_copy_6\n",
      "mnth_copy_7\n",
      "mnth_copy_8\n",
      "mnth_copy_9\n",
      "mnth_copy_10\n",
      "mnth_copy_11\n",
      "mnth_copy_12\n",
      "holiday_copy_1\n",
      "weekday_copy_1\n",
      "weekday_copy_2\n",
      "weekday_copy_3\n",
      "weekday_copy_4\n",
      "weekday_copy_5\n",
      "weekday_copy_6\n",
      "workingday_copy_1\n",
      "weathersit_copy_2\n",
      "weathersit_copy_3\n",
      "windspeed(ms)_squared\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "coef_ = best_lasso.coef_\n",
    "feature_names = X.columns\n",
    "\n",
    "print(\"Признаки с положительными коэффициентами:\")\n",
    "for coef, feature in zip(coef_, feature_names):\n",
    "    if coef > 0:\n",
    "        print(f\"{feature}: {coef:.3f}\")\n",
    "\n",
    "print(\"\\nПризнаки с отрицательными коэффициентами:\")\n",
    "for coef, feature in zip(coef_, feature_names):\n",
    "    if coef < 0:\n",
    "        print(f\"{feature}: {coef:.3f}\")\n",
    "\n",
    "print(\"\\nПризнаки с нулевыми коэффициентами:\")\n",
    "for coef, feature in zip(coef_, feature_names):\n",
    "    if coef == 0:\n",
    "        print(feature)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Тут я использовала chatgpt, потому что не догадалась, как это красиво сделать без тысяч циклов (сори). Промпт был взят как три вопроса из задания (У каких признаков наибольшие положительные коэфициенты? У каких наибольшие отрицательные? Какие коэффициенты занулились?) + мой предыдущий код из заданий (зато оцените как красиво вывел!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводы мои авторские:\n",
    "1) Больше всего на полученные результаты будут влиять значения температуры. Это логично, потому что при росте температуры (ее квадрата соответственно), у людей больше стимулов взять велосипед напрокат (так как погода хорошая). Касательно температуры - логично, что если на улице невыносимо жарко, то кататься на велосипеде некомфортно, поэтому в данных в итоге учитывается квадрат. \n",
    "2) Отрицательно влияет температура в квадрате, а также влажность в квадрате. Отрицательный коэффициент при этих коэффициентах в квадрате говорит о том, что с ростом температуры и влажности спрос сначала увеличивается, но после некоторого значения начинает снижаться, что, опять же, логично, потому что если на улице очень жарко или идет дождь, то кататься на велосипеде некомфортно. Тут не совсем логично утверждать, что спрос на велосипеды будет сразу меньше - это сильно зависит от значения самих коэффициентов. \n",
    "3) Занулились абсолютно все коэффициенты - дубли, а также скорость ветра, скорость ветра в квадрате и влажность. Помимо этого занулился коэффициент года, что тоже логично, потому что даже на графике данных было видно, что спрос на велосипеды был примерно одинаковый от года к году. Из интересного - занулились коэффициенты времен года и месяцев: видимо, температура в конкретном месяце сильно больше влияет на потребительский выбор, чем сам месяц или сезон. Также занулились коэффициенты дней: рабочий день или нерабочий - это, в конечном счете, не влияет на потребительский выбор. Также не влияет и коэффициент благоприятности погоды (возможно, он дублировал то же, что и температура, возможно, он просто придуман не очень хорошо) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В целом, результаты ожидаемые - действительно, погода будет влиять на потребительский выбор и, действительно, погода будет влиять нелинейно (что, кстати, оправдывает, почему линейная регрессия очень плохо описывает данные)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "__е) [2 балла]__ В прошлой домашке, когда мы придумывали фичи, мы предположили, что спрос на велосипеды зависит от скорости ветра квадратично, по параболе. Подтвердилось ли это предположение? \n",
    "\n",
    "__Ответ:__ Нет, не подтвердилось. Скорость ветра в конечном счете обнулилась как коэффициент в модели (причем как в квадрате, так и без него)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "А еще посмотрим на график: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y = df2[target], x = df2['windspeed(ms)_squared'])\n",
    "plt.title('Зависимость спроса на аренду велосипедов от скорости ветра в квадрате')\n",
    "plt.ylabel('Количество арендованных велосипедов')\n",
    "plt.xlabel('Скорость ветра в квадрате')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y = df2[target], x = df2['windspeed(ms)'])\n",
    "plt.title('Зависимость спроса на аренду велосипедов от скорости ветра')\n",
    "plt.xlabel('Скорость ветра')\n",
    "plt.ylabel('Количество арендованных велосипедов')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видно из графиков, никаких зависимостей (линейных или каких-то других) даже не угадывается и не прослеживается. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
